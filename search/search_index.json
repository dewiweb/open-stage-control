{
    "docs": [
        {
            "location": "/", 
            "text": "Open Stage Control\n\n\nLibre and modular OSC / MIDI controller\n\n\nOpen Stage Control is a desktop OSC bi-directional control surface application. It's built on web technologies and run as an \nElectron\n web server that accepts any number of clients.\n\n\nTry the online demo (Chrome 50+ required)\n\n\nDownload the latest release\n\n\n\n\nSupported platforms\n\n\nThe server can run on all \nplatforms supported by Electron\n or \nNode\n (in headless mode only, see \nRunning without Electron\n). Clients just need to connect to the server with a compatible browser :\n\n\n\n\nany system running Chrome/Chromium version \n50\n or later (Linux, MacOS, Windows, Android, etc)\n\n\niOS version \n9.3\n or later\n\n\n\n\nFirefox is \nnot\n supported.\n\n\nIs there an Android / iOS app ?\n\n\nNo, Open Stage Control is a \ndesktop\n server app. Mobile devices can open the app by connecting to the server using Chrome.\n\n\n\n\nAdd to home screen\n\n\nOnce connected, mobile devices can add the server's url to the home screen and launch it from there directly.\n\n\n\n\nNeed help ? Found a bug ?\n\n\nHead over the \nissue tracker\n :)\n\n\nFree what ?\n\n\nOpen Stage Control is a \nfree software\n, as in \ngratis\n and \u2014 most importantly \u2014 \nlibre\n. It always will be. If you want to support the project financially, consider using liberapay or \nflattr\n :\n\n\n\n\n\n\n\n\n\n\nTable of contents\n\n\n\n\nGetting started\n\n\nUser interface\n\n\nEditing sessions\n\n\nWidgets reference\n\n\nExtras:\n\n\nAdvanced property syntax\n\n\nCSS Tips\n\n\nTheming\n\n\nURL options\n\n\nRemote control\n\n\nCustom module\n\n\nMidi\n\n\n\n\n\n\nExamples\n\n\nCredits", 
            "title": "OSC Control Surface"
        }, 
        {
            "location": "/#open-stage-control", 
            "text": "Libre and modular OSC / MIDI controller  Open Stage Control is a desktop OSC bi-directional control surface application. It's built on web technologies and run as an  Electron  web server that accepts any number of clients.  Try the online demo (Chrome 50+ required)  Download the latest release", 
            "title": " Open Stage Control"
        }, 
        {
            "location": "/#supported-platforms", 
            "text": "The server can run on all  platforms supported by Electron  or  Node  (in headless mode only, see  Running without Electron ). Clients just need to connect to the server with a compatible browser :   any system running Chrome/Chromium version  50  or later (Linux, MacOS, Windows, Android, etc)  iOS version  9.3  or later   Firefox is  not  supported.", 
            "title": "Supported platforms"
        }, 
        {
            "location": "/#is-there-an-android-ios-app", 
            "text": "No, Open Stage Control is a  desktop  server app. Mobile devices can open the app by connecting to the server using Chrome.   Add to home screen  Once connected, mobile devices can add the server's url to the home screen and launch it from there directly.", 
            "title": "Is there an Android / iOS app ?"
        }, 
        {
            "location": "/#need-help-found-a-bug", 
            "text": "Head over the  issue tracker  :)", 
            "title": "Need help ? Found a bug ?"
        }, 
        {
            "location": "/#free-what", 
            "text": "Open Stage Control is a  free software , as in  gratis  and \u2014 most importantly \u2014  libre . It always will be. If you want to support the project financially, consider using liberapay or  flattr  :", 
            "title": "Free what ?"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "Getting started  User interface  Editing sessions  Widgets reference  Extras:  Advanced property syntax  CSS Tips  Theming  URL options  Remote control  Custom module  Midi    Examples  Credits", 
            "title": "Table of contents"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\n\n\nPrebuilt binaries for Linux, Windows and OS X can be found on the \nrelease\n page.\n\n\n\n\nOptions\n\n\nBelow are the available command-line options. Note that when running without any command-line switch (ie from a file browser), a launcher window will spawn to help setting them.\n\n\n\n\nPreferences are stored in the user's home folder in a file named \n.open-stage-control\n (hidden under Linux / macOS)\n\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-s\n\n\n--send\n\n\ndefault targets for all widgets (ip:port pairs)\n\n\n\n\n\n\n-l\n\n\n--load\n\n\nsession file to load\n\n\n\n\n\n\n\n\n--state\n\n\nstate file to load (osc messages will be sent, unless there are other clients connected)\n\n\n\n\n\n\n-b\n\n\n--blank\n\n\nload a blank session and start the editor\n\n\n\n\n\n\n-c\n\n\n--custom-module\n\n\ncustom module file to load\n\n\n\n\n\n\n-p\n\n\n--port\n\n\nhttp port of the server (default to 8080)\n\n\n\n\n\n\n-o\n\n\n--osc-port\n\n\nosc input port (default to --port)\n\n\n\n\n\n\n\n\n--tcp-port\n\n\ntcp server input port\n\n\n\n\n\n\n\n\n--tcp-targets\n\n\ntcp servers to connect to (ip:port pairs), does not susbtitute for --send\n\n\n\n\n\n\n-m\n\n\n--midi\n\n\nmidi router settings\n\n\n\n\n\n\n-d\n\n\n--debug\n\n\nlog received osc messages in the console\n\n\n\n\n\n\n-n\n\n\n--no-gui\n\n\ndisable default gui\n\n\n\n\n\n\n-g\n\n\n--gui-only\n\n\napp server's url. If true, local port (--port) is used\n\n\n\n\n\n\n-t\n\n\n--theme\n\n\ntheme name or path (mutliple values allowed) see \ntheming\n\n\n\n\n\n\n-e\n\n\n--examples\n\n\nlist examples instead of recent sessions\n\n\n\n\n\n\n\n\n--url-options\n\n\nurl options\n (opt=value pairs)\n\n\n\n\n\n\n\n\n--disable-vsync\n\n\ndisable gui's vertical synchronization\n\n\n\n\n\n\n\n\n--disable-gpu\n\n\ndisable hardware acceleration\n\n\n\n\n\n\n\n\n--read-only\n\n\ndisable session editing and session history changes\n\n\n\n\n\n\n\n\n--instance-name\n\n\nused to differenciate multiple instances in a zeroconf network\n\n\n\n\n\n\n\n\n--fullscreen\n\n\nlaunch in fullscreen mode (only affects the default gui, F11 to exit)\n\n\n\n\n\n\n\n\nCommand-line only :\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-h\n\n\n--help\n\n\nprint available options\n\n\n\n\n\n\n-v\n\n\n--version\n\n\nprint version number\n\n\n\n\n\n\n\n\nExamples\n\n\nopen-stage-control --send \n127\n.0.0.1:5555 \n127\n.0.0.1:6666 --port \n7777\n\n\n\n\n\nThis will create an app listening on port 7777 for synchronization messages, and sending its widgets state changes to ports 5555 and 6666.\n\n\nopen-stage-control --no-gui --load path/to/session.js --port \n9999\n\n\n\n\n\nThis will create a headless app available through http on port 9999 with session.js loaded automatically.\n\n\n\n\nWhat about HTTPS ?\n\n\nSecurity is out of the app's scope. If you are concerned about safety, using a private - protected - network should be enough.\n\n\n\n\nRun from sources\n\n\nRunning the app from the sources slightly differs from using built binaries : we'll build and launch the app with npm (node package manager).\n\n\n1. Requirements\n\n\n\n\nNode.js \n= 4.8\n\n\ngit\n\n\n\n\n2. Download sources\n\n\ngit clone https://github.com/jean-emmanuel/open-stage-control\n\ncd\n open-stage-control/\n\n# uncomment next line if you want the latest release\n\n\n#\u00a0instead of the current development version\n\n\n# git checkout $(git describe --tags `git rev-list --tags --max-count=1`)\n\nnpm install\nnpm run build\n\n\n\n\n\n\nUpdating from sources\n\n\ngit pull\nnpm install\nnpm run build\n\n\n\n\n\n\n3. Run !\n\n\nnpm start \n[\n -- options\n]\n\n\n\n\n\n\n\nA double hyphen (\n--\n) is used here to tell npm that the options are to be passed to the app.\n\n\n\n\nBuild from sources\n\n\n1. Requirements\n\n\n\n\nNode.js \n= 4.8\n\n\ngit\n\n\n\n\n2. Download sources \n build package\n\n\ngit clone https://github.com/jean-emmanuel/open-stage-control\n\ncd\n open-stage-control/\n\n# uncomment next line if you want the latest release\n\n\n#\u00a0instead of the current development version\n\n\n# git checkout $(git describe --tags `git rev-list --tags --max-count=1`)\n\nnpm install\n\n\n# TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x)\n\n\nexport\n \nPLATFORM\n=\nTARGET_PLATFORM\n\n# TARGET_ARCH can be ia32, x64 or armv7l\n\n\nexport\n \nARCH\n=\nTARGET_ARCH\n\nnpm run build\n\nnpm run package\n\n\n# For raspberry-pi / armv7l, run this instead\n\nnpm run package-rpi\n\n\n# Do one of the following if you want a deb package for debian/ubuntu\n\nnpm run deb32\nnpm run deb64\nnpm run debarm\n\n\n\n\nThis will build the app in \ndist/open-stage-control-PLATFORM-ARCH\n.\n\n\n\n\nBuilding the app for windows from a linux system requires wine to be installed.*\n\n\n\n\nRunning in a headless context\n\n\nElectron, Open Stage Control's engine, is based on chromium and can't run out of the box without a display server. However, using a virtual framebuffer does the trick. Detailed instructions can be found in Electron's \ndocumentation\n.\n\n\nIn short: install \nxvfb\n and prepend your command with \nxvfb-run\n:  \n\n\nxvfb-run open-stage-control -n\n\n\n\n\nRunning without Electron\n\n\nIt is possible to run the server in headless mode without Electron using \nnode\n (v6 or higher) :\n\n\nnode /path/to/packaged/open-stage-control/resources/app/ -n\nnode /path/to/sources/open-stage-control/app/ -n\n\n\n\n\nOr using the precompilled binaries for node:\n\n\nnode /path/to/packaged/open-stage-control-node/ -n\n\n\n\n\nTo build the app for node only from sources:\n\n\n# git clone, etc...\n\n\nnpm install\n\nnpm run build\n\nnpm run package-node", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "Prebuilt binaries for Linux, Windows and OS X can be found on the  release  page.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#options", 
            "text": "Below are the available command-line options. Note that when running without any command-line switch (ie from a file browser), a launcher window will spawn to help setting them.   Preferences are stored in the user's home folder in a file named  .open-stage-control  (hidden under Linux / macOS)       Option  Description      -s  --send  default targets for all widgets (ip:port pairs)    -l  --load  session file to load     --state  state file to load (osc messages will be sent, unless there are other clients connected)    -b  --blank  load a blank session and start the editor    -c  --custom-module  custom module file to load    -p  --port  http port of the server (default to 8080)    -o  --osc-port  osc input port (default to --port)     --tcp-port  tcp server input port     --tcp-targets  tcp servers to connect to (ip:port pairs), does not susbtitute for --send    -m  --midi  midi router settings    -d  --debug  log received osc messages in the console    -n  --no-gui  disable default gui    -g  --gui-only  app server's url. If true, local port (--port) is used    -t  --theme  theme name or path (mutliple values allowed) see  theming    -e  --examples  list examples instead of recent sessions     --url-options  url options  (opt=value pairs)     --disable-vsync  disable gui's vertical synchronization     --disable-gpu  disable hardware acceleration     --read-only  disable session editing and session history changes     --instance-name  used to differenciate multiple instances in a zeroconf network     --fullscreen  launch in fullscreen mode (only affects the default gui, F11 to exit)     Command-line only :      Option  Description      -h  --help  print available options    -v  --version  print version number     Examples  open-stage-control --send  127 .0.0.1:5555  127 .0.0.1:6666 --port  7777   This will create an app listening on port 7777 for synchronization messages, and sending its widgets state changes to ports 5555 and 6666.  open-stage-control --no-gui --load path/to/session.js --port  9999   This will create a headless app available through http on port 9999 with session.js loaded automatically.   What about HTTPS ?  Security is out of the app's scope. If you are concerned about safety, using a private - protected - network should be enough.", 
            "title": "Options"
        }, 
        {
            "location": "/getting-started/#run-from-sources", 
            "text": "Running the app from the sources slightly differs from using built binaries : we'll build and launch the app with npm (node package manager).  1. Requirements   Node.js  = 4.8  git   2. Download sources  git clone https://github.com/jean-emmanuel/open-stage-control cd  open-stage-control/ # uncomment next line if you want the latest release  #\u00a0instead of the current development version  # git checkout $(git describe --tags `git rev-list --tags --max-count=1`) \nnpm install\nnpm run build   Updating from sources  git pull\nnpm install\nnpm run build   3. Run !  npm start  [  -- options ]    A double hyphen ( -- ) is used here to tell npm that the options are to be passed to the app.", 
            "title": "Run from sources"
        }, 
        {
            "location": "/getting-started/#build-from-sources", 
            "text": "1. Requirements   Node.js  = 4.8  git   2. Download sources   build package  git clone https://github.com/jean-emmanuel/open-stage-control cd  open-stage-control/ # uncomment next line if you want the latest release  #\u00a0instead of the current development version  # git checkout $(git describe --tags `git rev-list --tags --max-count=1`) \nnpm install # TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x)  export   PLATFORM = TARGET_PLATFORM # TARGET_ARCH can be ia32, x64 or armv7l  export   ARCH = TARGET_ARCH\n\nnpm run build\n\nnpm run package # For raspberry-pi / armv7l, run this instead \nnpm run package-rpi # Do one of the following if you want a deb package for debian/ubuntu \nnpm run deb32\nnpm run deb64\nnpm run debarm  This will build the app in  dist/open-stage-control-PLATFORM-ARCH .   Building the app for windows from a linux system requires wine to be installed.*", 
            "title": "Build from sources"
        }, 
        {
            "location": "/getting-started/#running-in-a-headless-context", 
            "text": "Electron, Open Stage Control's engine, is based on chromium and can't run out of the box without a display server. However, using a virtual framebuffer does the trick. Detailed instructions can be found in Electron's  documentation .  In short: install  xvfb  and prepend your command with  xvfb-run :    xvfb-run open-stage-control -n", 
            "title": "Running in a headless context"
        }, 
        {
            "location": "/getting-started/#running-without-electron", 
            "text": "It is possible to run the server in headless mode without Electron using  node  (v6 or higher) :  node /path/to/packaged/open-stage-control/resources/app/ -n\nnode /path/to/sources/open-stage-control/app/ -n  Or using the precompilled binaries for node:  node /path/to/packaged/open-stage-control-node/ -n  To build the app for node only from sources:  # git clone, etc... \n\nnpm install\n\nnpm run build\n\nnpm run package-node", 
            "title": "Running without Electron"
        }, 
        {
            "location": "/interface/", 
            "text": "User interface\n\n\nSidepanel\n\n\nThe sidepanel can be opened by clicking the navigation icon in the upper right corner or by pressing F10.\n\n\nState management\n\n\n\n\nStore: save the state of all widgets in the temporary slot\n\n\nRecall: reload saved state from the temporary slot\n\n\nSend All: make all widgets send their current value\n\n\nExport: save the state of all widgets to a \n.preset\n file\n\n\nImport: load a state from a \n.preset\n file\n\n\n\n\nTraversing gestures\n\n\nBy default, a dragging gesture can only affect the widget it started on. Enabling traversing gesture does two things:\n\n\n\n\nmake gestures affect every widgets no matter where they started\n\n\nmake sliders-like widgets respond as if their \nsnap\n option is enabled\n\n\n\n\nWhen traversing gestures are set to \"Smart\", these will only affect widgets that have the same type as the first touched widget.\n\n\nEditor\n\n\nSee \nEditing sessions\n.\n\n\nInteractions\n\n\n\n\n\n\n\n\nMouse\n\n\nTouch\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nClick\n\n\nTap\n\n\nHandled at pressing time, not releasing.\n\n\n\n\n\n\nDouble Click\n\n\nDouble Tap\n\n\nSome widgets handle double click / tap events.\n\n\n\n\n\n\nRight-click\n\n\nLong touch\n\n\nWidgets that have only one value input will give focus to it when receiving this event. When the editor is enabled, Right-click / Long touch spawns the editor's context menu.\n\n\n\n\n\n\nDrag\n\n\nDrag\n\n\nThe widgets respond to mouse and touch drag gestures with a 1:1 precision ratio.\n\n\n\n\n\n\nCtrl\n + Drag\n\n\n\n\nHolding the \nCtrl\n key while dragging with the mouse increases the gesture's precision by 10.\n\n\n\n\n\n\n\n\nTwo-fingers drag (single target)\n\n\nUsing two on a single-touch target increases the gesture's precision by 10.", 
            "title": "User interface"
        }, 
        {
            "location": "/interface/#user-interface", 
            "text": "", 
            "title": "User interface"
        }, 
        {
            "location": "/interface/#sidepanel", 
            "text": "The sidepanel can be opened by clicking the navigation icon in the upper right corner or by pressing F10.", 
            "title": "Sidepanel"
        }, 
        {
            "location": "/interface/#state-management", 
            "text": "Store: save the state of all widgets in the temporary slot  Recall: reload saved state from the temporary slot  Send All: make all widgets send their current value  Export: save the state of all widgets to a  .preset  file  Import: load a state from a  .preset  file", 
            "title": "State management"
        }, 
        {
            "location": "/interface/#traversing-gestures", 
            "text": "By default, a dragging gesture can only affect the widget it started on. Enabling traversing gesture does two things:   make gestures affect every widgets no matter where they started  make sliders-like widgets respond as if their  snap  option is enabled   When traversing gestures are set to \"Smart\", these will only affect widgets that have the same type as the first touched widget.", 
            "title": "Traversing gestures"
        }, 
        {
            "location": "/interface/#editor", 
            "text": "See  Editing sessions .", 
            "title": "Editor"
        }, 
        {
            "location": "/interface/#interactions", 
            "text": "Mouse  Touch  Description      Click  Tap  Handled at pressing time, not releasing.    Double Click  Double Tap  Some widgets handle double click / tap events.    Right-click  Long touch  Widgets that have only one value input will give focus to it when receiving this event. When the editor is enabled, Right-click / Long touch spawns the editor's context menu.    Drag  Drag  The widgets respond to mouse and touch drag gestures with a 1:1 precision ratio.    Ctrl  + Drag   Holding the  Ctrl  key while dragging with the mouse increases the gesture's precision by 10.     Two-fingers drag (single target)  Using two on a single-touch target increases the gesture's precision by 10.", 
            "title": "Interactions"
        }, 
        {
            "location": "/editing-sessions/", 
            "text": "Editing sessions\n\n\nThe session editor can be enabled from the sidepanel. Once enabled, clicking on a widget will make it the \nselected widget\n.\n\n\nRoot panel\n\n\nThe root panel can be selected by clicking on the \"Root\" button in the sidepanel.\n\n\nContext menu\n\n\nRight clicking / long touch on a widget or on a tab will also display a context menu providing useful utilities :\n\n\n\n\nEdit parent\n: select widget's parent for edition\n\n\nCopy\n: copy widget's data\n\n\nCut\n: copy widget's data and delete selected widget\n\n\nWrap in\n: wrap the widget in a new container\n\n\nPaste\n: paste copied widget in selected container\n\n\nPaste\n: paste the widget as is\n\n\nID + 1\n : increments the id of the copied widget (and all its children) before pasting\n\n\nClone\n : create a clone widget targetting the copied widget\n\n\nAdd widget\n: create a new widget in selected container\n\n\nAdd tab\n: create a new tab in selected container\n\n\nDelete\n: delete selected tab or widget\n\n\n\n\nSave\n\n\nCurrent session can be exported as a \n.json\n file. When overwriting a session file that's currently is use by other clients, they will reload it automatically.\n\n\nLoad\n\n\nLoading a session file doesn't affect other clients.\n\n\nGrid\n\n\nBy default, widget resizing / dragging snaps to a 10 pixel wide grid. Its width can be customized in the editor (when it's enabled). Setting its width to 1 will disable it. Note that the grid doesn't affect manual setting of a widget's size / position.\n\n\nProperties\n\n\nSelected widget's properties are displayed and can be modified in the sidepanel. The \nwidgets reference\n section lists the available properties for each widget type. Property fields are all multiline (press \nshift + enter\n for new line).\n\n\nProperties are written in JSON, with some flexibility brought by the \nJSON5\n format. For example, doubles quotes around object keys are not mandatory. All input will be converted to standard JSON.\n\n\nWidget resizing / dragging\n\n\nSelected widget can be resized using its south, south-east and east handles. It can be dragged with its north-west handle. Using this feature will convert position and size values to plain number values, thus breaking previously set percent or inherited values.\n\n\nKeyboard shortcuts\n\n\nThe following shortcuts are always available:\n\n\n\n\n\n\n\n\nShortcut\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmod + e\n\n\nenable/disable editor\n\n\n\n\n\n\nmod + s\n\n\nsave session as...\n\n\n\n\n\n\nmod + o\n\n\nopen a session file\n\n\n\n\n\n\n\n\nThe following shortcuts are available only when the editor is enabled:\n\n\n\n\n\n\n\n\nShortcut\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmod + click\n*\n\n\nMulti-widget selection. Widgets can be toggled from selection by clicking on them individually.\n\n\n\n\n\n\nshift + click + drag\n*\n\n\nDraw a selection rectangle and attempt to select widgets in it (starts by selecting the widget under the cursor). If \nmod\n is pressed too, current selection is kept and will be merged with the new one if possible.\n\n\n\n\n\n\nf2\n\n\nEdit selected widget's label\n\n\n\n\n\n\nmod + z\n\n\nUndo\n\n\n\n\n\n\nmod + y / mod + shift + z\n\n\nRedo\n\n\n\n\n\n\ndelete\n (\nbackspace\n on Mac)\n\n\nDelete selected widgets\n\n\n\n\n\n\nmod + c\n\n\nCopy selected widgets\n\n\n\n\n\n\nmod + x\n\n\nCut selected widgets\n\n\n\n\n\n\nmod + v\n\n\nPaste clipboard in selected widget\n\n\n\n\n\n\nmod + shift + v\n\n\nPaste and increment id\n\n\n\n\n\n\nup, down, left, right\n\n\nMove selected widgets (1 grid unit, hold \nshift\n for 5 grid units)\n\n\n\n\n\n\nalt + [up, down, left, right]\n\n\nResize selected widgets (1 grid unit, hold \nshift\n for 5 grid units)\n\n\n\n\n\n\nmod + a\n\n\nSelect current widget's siblings and itself\n\n\n\n\n\n\nmod + shift + a\n\n\nCancel current widget selection\n\n\n\n\n\n\nmod + up\n\n\nSelect current widget's parent\n\n\n\n\n\n\nmod + down\n\n\nSelect current widget's first child\n\n\n\n\n\n\nmod + right\n\n\nSelect current widget's next sibling\n\n\n\n\n\n\nmod + left\n\n\nSelect current widget's previous sibling\n\n\n\n\n\n\n\n\nWhere \nmod\n is \nctrl\n except on MacOs (\ncommand\n)\n\n\n\n\n* Multi-widgets editing\n\n\n\n\nselection can only contain sibling widgets (same direct parent)\n\n\ncontext-menu actions and properties changes apply to all selected widgets\n\n\nresizing / dragging will affect all selected widgets, relatively to the first selected widget", 
            "title": "Editing sessions"
        }, 
        {
            "location": "/editing-sessions/#editing-sessions", 
            "text": "The session editor can be enabled from the sidepanel. Once enabled, clicking on a widget will make it the  selected widget .", 
            "title": "Editing sessions"
        }, 
        {
            "location": "/editing-sessions/#root-panel", 
            "text": "The root panel can be selected by clicking on the \"Root\" button in the sidepanel.", 
            "title": "Root panel"
        }, 
        {
            "location": "/editing-sessions/#context-menu", 
            "text": "Right clicking / long touch on a widget or on a tab will also display a context menu providing useful utilities :   Edit parent : select widget's parent for edition  Copy : copy widget's data  Cut : copy widget's data and delete selected widget  Wrap in : wrap the widget in a new container  Paste : paste copied widget in selected container  Paste : paste the widget as is  ID + 1  : increments the id of the copied widget (and all its children) before pasting  Clone  : create a clone widget targetting the copied widget  Add widget : create a new widget in selected container  Add tab : create a new tab in selected container  Delete : delete selected tab or widget", 
            "title": "Context menu"
        }, 
        {
            "location": "/editing-sessions/#save", 
            "text": "Current session can be exported as a  .json  file. When overwriting a session file that's currently is use by other clients, they will reload it automatically.", 
            "title": "Save"
        }, 
        {
            "location": "/editing-sessions/#load", 
            "text": "Loading a session file doesn't affect other clients.", 
            "title": "Load"
        }, 
        {
            "location": "/editing-sessions/#grid", 
            "text": "By default, widget resizing / dragging snaps to a 10 pixel wide grid. Its width can be customized in the editor (when it's enabled). Setting its width to 1 will disable it. Note that the grid doesn't affect manual setting of a widget's size / position.", 
            "title": "Grid"
        }, 
        {
            "location": "/editing-sessions/#properties", 
            "text": "Selected widget's properties are displayed and can be modified in the sidepanel. The  widgets reference  section lists the available properties for each widget type. Property fields are all multiline (press  shift + enter  for new line).  Properties are written in JSON, with some flexibility brought by the  JSON5  format. For example, doubles quotes around object keys are not mandatory. All input will be converted to standard JSON.", 
            "title": "Properties"
        }, 
        {
            "location": "/editing-sessions/#widget-resizing-dragging", 
            "text": "Selected widget can be resized using its south, south-east and east handles. It can be dragged with its north-west handle. Using this feature will convert position and size values to plain number values, thus breaking previously set percent or inherited values.", 
            "title": "Widget resizing / dragging"
        }, 
        {
            "location": "/editing-sessions/#keyboard-shortcuts", 
            "text": "The following shortcuts are always available:     Shortcut  Description      mod + e  enable/disable editor    mod + s  save session as...    mod + o  open a session file     The following shortcuts are available only when the editor is enabled:     Shortcut  Description      mod + click *  Multi-widget selection. Widgets can be toggled from selection by clicking on them individually.    shift + click + drag *  Draw a selection rectangle and attempt to select widgets in it (starts by selecting the widget under the cursor). If  mod  is pressed too, current selection is kept and will be merged with the new one if possible.    f2  Edit selected widget's label    mod + z  Undo    mod + y / mod + shift + z  Redo    delete  ( backspace  on Mac)  Delete selected widgets    mod + c  Copy selected widgets    mod + x  Cut selected widgets    mod + v  Paste clipboard in selected widget    mod + shift + v  Paste and increment id    up, down, left, right  Move selected widgets (1 grid unit, hold  shift  for 5 grid units)    alt + [up, down, left, right]  Resize selected widgets (1 grid unit, hold  shift  for 5 grid units)    mod + a  Select current widget's siblings and itself    mod + shift + a  Cancel current widget selection    mod + up  Select current widget's parent    mod + down  Select current widget's first child    mod + right  Select current widget's next sibling    mod + left  Select current widget's previous sibling     Where  mod  is  ctrl  except on MacOs ( command )   * Multi-widgets editing   selection can only contain sibling widgets (same direct parent)  context-menu actions and properties changes apply to all selected widgets  resizing / dragging will affect all selected widgets, relatively to the first selected widget", 
            "title": "Keyboard shortcuts"
        }, 
        {
            "location": "/widgets-reference/", 
            "text": "Generic properties\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntype\n\u00b6\n\n\nstring\n\n\n\"auto\"\n\n\n\n\n\n\n\n\nid\n\u00b6\n\n\nstring\n\n\n\"auto\"\n\n\nWidgets sharing the same \nid\n will act as clones and update each other's value(s) without sending extra osc messages.\n\n\n\n\n\n\nlinkId\n\u00b6\n\n\nstring\n|\narray\n\n\n\"\"\n\n\nWidgets sharing the same \nlinkId\n update each other's value(s) AND send their respective osc messages.\nWhen prefixed with \n, the \nlinkId\n will make the widget act as a master (sending but not receiving)\nWhen prefixed with \n, the \nlinkId\n will make the widget act as a slave (receiving but not sending)\n\n\n\n\n\n\ngeometry\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nleft\n\u00b6\n\n\nnumber\n|\nstring\n\n\n\"auto\"\n\n\nWhen both top and left are set to auto, the widget is positioned according to the normal flow of the page (from left to right, by order of creation).\nOtherwise, the widget will be absolutely positioned\n\n\n\n\n\n\ntop\n\u00b6\n\n\nnumber\n|\npercentage\n\n\n\"auto\"\n\n\nWhen both top and left are set to auto, the widget is positioned according to the normal flow of the page (from left to right, by order of creation).\nOtherwise, the widget will be absolutely positioned\n\n\n\n\n\n\nwidth\n\u00b6\n\n\nnumber\n|\npercentage\n\n\n\"auto\"\n\n\n\n\n\n\n\n\nheight\n\u00b6\n\n\nnumber\n|\npercentage\n\n\n\"auto\"\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nlabel\n\u00b6\n\n\nstring\n|\nboolean\n\n\n\"auto\"\n\n\nSet to \nfalse\n to hide completely\nInsert icons using the prefix ^ followed by the icon's name : ^play, ^pause, etc\n\n\n\n\n\n\ncolor\n\u00b6\n\n\nstring\n\n\n\"auto\"\n\n\nCSS color code. Set to \"auto\" to inherit from parent widget.\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nCSS rules\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ndefault\n\u00b6\n\n\n*\n\n\n\"\"\n\n\nIf set, the widget will be initialized with this value when the session is loaded.\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n*\n\n\n\"\"\n\n\nDefine the widget's value depending on other widget's values / properties using property inheritance and property maths\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nprecision\n\u00b6\n\n\ninteger\n|\nstring\n\n\n2\n\n\nDefines the number of decimals to display and to send.\nSet to \n0\n to send integers only.\nData type can be specified by appending a valid osc type tag to the precision value, for example : \n3d\n will make the widget send double precision numbers rounded to three decimals\n\n\n\n\n\n\naddress\n\u00b6\n\n\nstring\n\n\n\"auto\"\n\n\nOSC address for sending messages, it must start with a /\n\n\n\n\n\n\npreArgs\n\u00b6\n\n\n*\n|\narray\n\n\n\"\"\n\n\nA value or array of values that will be prepended to the OSC messages.\nValues can be defined as objects if the osc type tag needs to be specified: \n{type: \ni\n, value: 1}\n\n\n\n\n\n\ntarget\n\u00b6\n\n\nstring\n|\narray\n|\nnull\n\n\n\"\"\n\n\nThis defines the targets of the widget's OSC messages\n- A \nstring\n or \narray\n of strings formatted as follow: \nip:port\n or \n[\nip:port\n]\n- If midi is enabled, targets can be \nmidi:device_name\n- The special item \nself\n can be used to refer to the emitting client directly.\n- If no target is set, messages can still be sent if the server has default targets\n- The server's default targets can be bypassed by setting one of the items to \nnull\n\n\n\n\n\n\nbypass\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to prevent the widget from sending any osc message\n\n\n\n\n\n\n\n\nSliders\n\n\nfader\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAvailable CSS variables:\n- \n--color-gauge: color;\n- \n--color-knob: color;\n- \n--color-pips: color;\n- \n--gauge-opacity: number;\n\n\n\n\n\n\nfader\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nhorizontal\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display the fader horizontally\n\n\n\n\n\n\nalignRight\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to invert the pip's and fader's position\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the scale\n\n\n\n\n\n\ninput\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the built-in input\n\n\n\n\n\n\nmeter\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to true to display a vu-meter next in the fader\n- the meter's \nid\n will be the same as the widget's with \n/meter\n appended to it\n- the meter's \nid\n will be the same as the widget's with \n/meter\n appended to it\n\n\n\n\n\n\ncompact\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display a compact alternative for the widget. Disables default mouse/touch focusing on the value display.\n\n\n\n\n\n\ndashed\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display a dashed gauge\n\n\n\n\n\n\nsnap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nBy default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position\n\n\n\n\n\n\nspring\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nWhen set to \ntrue\n, the widget will go back to its \ndefault\n value when released\n\n\n\n\n\n\ndoubleTap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to make the fader reset to its \ndefault\n value when receiving a double tap.\nCan also be an osc address, in which case the widget will just send an osc message (\n/\ndoubleTap\n \npreArgs\n)\n\n\n\n\n\n\nrange\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the breakpoints of the fader's scale:\n- keys can be percentages and/or \nmin\n / \nmax\n- values can be \nnumber\n or \nobject\n if a custom label is needed\nExample: (\n{min:{\n-inf\n: 0}, \n50%\n: 0.25, max: {\n+inf\n: 1}}\n)\n\n\n\n\n\n\nsteps\n\u00b6\n\n\nstring\n|\nnumber\n|\narray\n\n\n\"\"\n\n\nRestricts the widget's value:\n- \nauto\n: use values defined in \nrange\n- \nnumber\n: define a number of evenly spaced steps\n- \narray\n: use arbitrary values\n\n\n\n\n\n\nlogScale\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale\n\n\n\n\n\n\nunit\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nUnit will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\n\n\norigin\n\u00b6\n\n\nnumber\n\n\n\"auto\"\n\n\nDefines the starting point's value of the fader's gauge\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ntouchAddress\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nOSC address for touched state messages: \n/touchAddress [preArgs] 0/1\n\n\n\n\n\n\nmeterAddress\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nOSC address for the built-in meter\n\n\n\n\n\n\n\n\nknob\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAvailable CSS variables:\n- \n--color-gauge: color;\n- \n--color-knob: color;\n- \n--color-pips: color;\n\n\n\n\n\n\nknob\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the scale\n\n\n\n\n\n\ninput\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the built-in input\n\n\n\n\n\n\ndashed\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display a dashed gauge\n\n\n\n\n\n\nangle\n\u00b6\n\n\nnumber\n\n\n270\n\n\nDefines the angle's width of the knob, in degrees\n\n\n\n\n\n\nsnap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nBy default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position\n\n\n\n\n\n\nspring\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nWhen set to \ntrue\n, the widget will go back to its \ndefault\n value when released\n\n\n\n\n\n\ndoubleTap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to make the knob reset to its \ndefault\n value when receiving a double tap.\nCan also be an osc address, in which case the widget will just send an osc message (\n/\ndoubleTap\n \npreArgs\n)\n\n\n\n\n\n\nrange\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the breakpoints of the fader's scale:\n- keys can be percentages and/or \nmin\n / \nmax\n- values can be \nnumber\n or \nobject\n if a custom label is needed\nExample: (\n{min:{\n-inf\n: 0}, \n50%\n: 0.25, max: {\n+inf\n: 1}}\n)\n\n\n\n\n\n\nsteps\n\u00b6\n\n\nstring\n|\nnumber\n|\narray\n\n\n\"\"\n\n\nRestricts the widget's value:\n- \nauto\n: use values defined in \nrange\n- \nnumber\n: define a number of evenly spaced steps\n- \narray\n: use arbitrary values\n\n\n\n\n\n\nlogScale\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale\n\n\n\n\n\n\nunit\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nUnit will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\n\n\norigin\n\u00b6\n\n\nnumber\n\n\n\"auto\"\n\n\nDefines the starting point's value of the knob's gauge\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ntouchAddress\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nOSC address for touched state messages: \n/touchAddress [preArgs] 0/1\n\n\n\n\n\n\n\n\nencoder\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nencoder\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nticks\n\u00b6\n\n\nnumber\n\n\n\"auto\"\n\n\ndefines the granularity / verbosity of the encoder (number of step for a 360\u00b0 arc)\n\n\n\n\n\n\nback\n\u00b6\n\n\n*\n\n\n-1\n\n\nDefines which value is sent when rotating the encoder anticlockwise\n\n\n\n\n\n\nforth\n\u00b6\n\n\n*\n\n\n1\n\n\nDefines which value is sent when rotating the encoder clockwise\n\n\n\n\n\n\nrelease\n\u00b6\n\n\nnumber\n\n\n\"auto\"\n\n\nDefines which value is sent when releasing the encoder:\n- Set to \nnull\n to send send no argument in the osc message\n- Can be an \nobject\n if the type needs to be specified\n\n\n\n\n\n\nsnap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nBy default, dragging the widget will modify it's value starting from its last value. Setting this to \ntrue\n will make it snap directly to the mouse/touch position\n\n\n\n\n\n\ndoubleTap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to make the fader reset to its \ndefault\n value when receiving a double tap.\nCan also be an osc address, in which case the widget will just send an osc message (\n/\ndoubleTap\n \npreArgs\n)\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ntouchAddress\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nOSC address for touched state messages: \n/touchAddress [preArgs] 0/1\n\n\n\n\n\n\n\n\nrange\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAvailable CSS variables:\n- \n--color-gauge: color;\n- \n--color-knob: color;\n- \n--color-pips: color;\n- \n--gauge-opacity: number;\n\n\n\n\n\n\nrange\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nSee fader's \nrange\n\n\n\n\n\n\nhorizontal\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nhorizontal\n\n\n\n\n\n\nalignRight\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nalignRight\n\n\n\n\n\n\ninput\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSee fader's \ninput\n\n\n\n\n\n\ncompact\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \ncompact\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSee fader's \npips\n\n\n\n\n\n\nsnap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nsnap\n\n\n\n\n\n\nspring\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nspring\n\n\n\n\n\n\nlogScale\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nlogScale\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ntouchAddress\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nSee fader's \ntouchAddress\n\n\n\n\n\n\nsplit\n\u00b6\n\n\nboolean\n|\nobject\n\n\nfalse\n\n\nSet to \ntrue\n to send separate osc messages for \nlow\n and \nhigh\n handles. The \naddress\n will be the same as the widget's with \n/low\n or \n/high\n appended to it\nCan be set as an object to specify a different \naddress\n : \n['/osc_address_low', '/osc_address_high']\nNote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\n\n\n\n\nButtons\n\n\ntoggle\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntoggle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ndoubleTap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to make the button require a double tap to be toggled instead of a single tap\n\n\n\n\n\n\nled\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display the toggle's state with a led\n\n\n\n\n\n\non\n\u00b6\n\n\n*\n\n\n1\n\n\nSet to \nnull\n to send send no argument in the osc message\nCan be an \nobject\n if the type needs to be specified (see preArgs)\n\n\n\n\n\n\noff\n\u00b6\n\n\n*\n\n\n0\n\n\nSet to \nnull\n to send send no argument in the osc message\nCan be an \nobject\n if the type needs to be specified (see preArgs)\n\n\n\n\n\n\n\n\npush\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npush\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ndoubleTap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to make the button require a double tap to be pushed instead of a single tap\n\n\n\n\n\n\non\n\u00b6\n\n\n*\n\n\n1\n\n\nSet to \nnull\n to send send no argument in the osc message\nCan be an \nobject\n if the type needs to be specified (see preArgs)\n\n\n\n\n\n\noff\n\u00b6\n\n\n*\n\n\n0\n\n\nSet to \nnull\n to send send no argument in the osc message\nCan be an \nobject\n if the type needs to be specified (see preArgs)\n\n\n\n\n\n\nnorelease\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to prevent sending any osc message when releasing the button\n\n\n\n\n\n\n\n\nswitch\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nswitch\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nhorizontal\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display values horizontally\n\n\n\n\n\n\nshowValues\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nIf values is an object, set to \ntrue\n to display both values and labels instead of labels only\n\n\n\n\n\n\nvalues\n\u00b6\n\n\narray\n|\nobject\n\n\n{\n\"Value 1\": 1,\n\"Value 2\": 2\n}\n\n\nArray\n of possible values to switch between : \n[1,2,3]\nObject\n of \nlabel\n:value\n pairs. Numeric labels must be prepended or appended with a white space (or any other non-numeric character) otherwise the order of the values won't be kept\n\n\n\n\n\n\n\n\ndropdown\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ndropdown\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalues\n\u00b6\n\n\narray\n|\nobject\n\n\n{\n\"Value 1\": 1,\n\"Value 2\": 2\n}\n\n\nArray\n of possible values to switch between : \n[1,2,3]\nObject\n of label:value pairs. Numeric labels must be prepended or appended with a white space (or any other non-numeric character) otherwise the order of the values won't be kept\nAn empty option will always be prepended to values (sends an osc message without any value); it can be hidden by adding \noption:first-child{display:none}\n to the widget's \ncss\n\n\n\n\n\n\n\n\nPads\n\n\nxy\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAvailable CSS variables:\n- \n--background: background;\n: sets the dragging area's background\n- \n--pips-color: color;\n- \n--pips-opacity: number;\n- \n--point-opacity: number;\n\n\n\n\n\n\nxy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\npointSize\n\u00b6\n\n\ninteger\n\n\n20\n\n\nDefines the points' size\n\n\n\n\n\n\nsnap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nBy default, the points are dragged from their initial position.\nIf set to \ntrue\n, touching anywhere on the widget's surface will make them snap to the touching coordinates\n\n\n\n\n\n\nspring\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nWhen set to \ntrue\n, the widget will go back to its default value when released\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the scale\n\n\n\n\n\n\nrangeX\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the x axis\n\n\n\n\n\n\nrangeY\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the y axis\n\n\n\n\n\n\nlogScaleX\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the x axis (log10)\n\n\n\n\n\n\nlogScaleY\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the y axis (log10)\n\n\n\n\n\n\ninput\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to false to hide the built-in input widget\n\n\n\n\n\n\ndoubleTap\n\u00b6\n\n\nboolean\n|\nstring\n\n\nfalse\n\n\nSet to \ntrue\n to make the fader reset to its default value when receiving a double tap.\nCan also be an osc address, which case the widget will just send an osc message: \n/\ndoubleTap\n \npreArgs\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ntouchAddress\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nOSC address for touched state messages: \n/touchAddress [preArgs] 0/1\n)\n\n\n\n\n\n\nsplit\n\u00b6\n\n\nboolean\n|\nobject\n\n\nfalse\n\n\nSet to \ntrue\n to send separate osc messages for each point's x and y axis. The address will be the same as the widget's with \n/x\n or \n/y\n appended to it\nCan be set as an \nobject\n to specify a different address : ['/osc_address_x', '/osc_address_y']\nNote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\n\n\n\n\nrgb\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nrgb\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nsnap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nBy default, the points are dragged from their initial position.\nIf set to \ntrue\n, touching anywhere on the widget's surface will make them snap to the touching coordinates\n\n\n\n\n\n\nspring\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nWhen set to \ntrue\n, the widget will go back to its default value when released\n\n\n\n\n\n\nrange\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 255\n}\n\n\nDefines the widget's output scale.\n\n\n\n\n\n\ninput\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the built-in input widget\n\n\n\n\n\n\nalpha\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to enable alpha channel\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nsplit\n\u00b6\n\n\nboolean\n|\nobject\n\n\nfalse\n\n\nSet to \ntrue\n to send separate osc messages for for r and g \n b. The address will be the same as the widget's with \n/r\n, \n/g\n or \n/b\n appended to it\nCan be set as an \nobject\n to specify a different address : \n['/r', '/g', 'b']\nNote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\n\n\n\n\nmultixy\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAvailable CSS variables:\n- \n--background: background;\n: sets the dragging area's background\n- \n--pips-color: color;\n- \n--pips-opacity: number;\n- \n--color-text: point-color;\nPads can be targetted individually with the .pad-X selector (where X is the pad's index)\n\n\n\n\n\n\nmulti xy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\npoints\n\u00b6\n\n\ninteger\n|\narray\n\n\n2\n\n\nDefines the number of points on the pad\nCan be an array of strings that will be used as labels for the points (ex: \n['A', 'B']\n)\n\n\n\n\n\n\nxy\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\npointSize\n\u00b6\n\n\ninteger\n\n\n20\n\n\nDefines the points' size\n\n\n\n\n\n\nsnap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nBy default, the points are dragged from their initial position.\nIf set to \ntrue\n, touching anywhere on the widget's surface will make them snap to the touching coordinates\n\n\n\n\n\n\nspring\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nWhen set to \ntrue\n, the widget will go back to its default value when released\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the scale\n\n\n\n\n\n\nrangeX\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the x axis\n\n\n\n\n\n\nrangeY\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the y axis\n\n\n\n\n\n\nlogScaleX\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the x axis (log10)\n\n\n\n\n\n\nlogScaleY\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the y axis (log10)\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ntouchAddress\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nOSC address for touched state messages: \n/touchAddress [preArgs] 0/1\n\n\n\n\n\n\nsplit\n\u00b6\n\n\nboolean\n|\nobject\n\n\nfalse\n\n\nSet to \ntrue\n to send separate osc messages for each point's x and y axis. The address will be the same as the widget's with \n/N/x\n or \n/N/y\n appended to it, where N is the point's id (or the point's label if points is an array)\nCan be set as an \nobject\n to specify a different address : \n['/0/x', '/0/y', '/1/x', '/2/y']\nNote: the widget will only respond to its original osc address, not to the splitted version\n\n\n\n\n\n\n\n\nMatrices\n\n\nmatrix\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmatrix\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nwidgetType\n\u00b6\n\n\nstring\n\n\n\"toggle\"\n\n\nDefines the type of the widgets in the matrix\n\n\n\n\n\n\nmatrix\n\u00b6\n\n\narray\n\n\n[\n2,\n2\n]\n\n\nDefines the number of columns and and rows in the matrix\n\n\n\n\n\n\nstart\n\u00b6\n\n\ninteger\n\n\n0\n\n\nFirst widget's index\n\n\n\n\n\n\nspacing\n\u00b6\n\n\ninteger\n\n\n0\n\n\nAdds space between widgets\n\n\n\n\n\n\ntraversing\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to disable traversing gestures\n\n\n\n\n\n\nborder\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to disables the widgets' borders\n\n\n\n\n\n\nprops\n\u00b6\n\n\nobject\n\n\n{}\n\n\nDefines a set of property to override the widgets' defaults.\nFormulas in this field are resolved with an extra variable representing each widget's index: \n$\nNote: by default, the widgets inherit from the matrix' \nid\n and osc properties (\nid\n and \naddress\n are appended with \n/$\n)\n\n\n\n\n\n\n\n\nkeyboard\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAvailable CSS variables:\n- \n--color-white:color;\n (white keys color)\n- \n--color-black:color;\n (black keys color)\n\n\n\n\n\n\nmatrix\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nkeys\n\u00b6\n\n\nnumber\n\n\n25\n\n\nDefines the number keys\n\n\n\n\n\n\nstart\n\u00b6\n\n\nnumber\n\n\n48\n\n\nMIDI note number to start with (default is C4)\nStandard keyboards settings are: \n[25, 48]\n, \n[49, 36]\n, \n[61, 36]\n, \n[88, 21]\n\n\n\n\n\n\ntraversing\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to disable traversing gestures\n\n\n\n\n\n\non\n\u00b6\n\n\n*\n\n\n1\n\n\nSet to \nnull\n to send send no argument in the osc message\nCan be an \nobject\n if the type needs to be specified (see preArgs)\n\n\n\n\n\n\noff\n\u00b6\n\n\n*\n\n\n0\n\n\nSet to \nnull\n to send send no argument in the osc message\nCan be an \nobject\n if the type needs to be specified (see preArgs)\n\n\n\n\n\n\nosc\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nsplit\n\u00b6\n\n\nboolean\n|\nstring\n\n\nfalse\n\n\ntrue\n: the widget's index will be appended to the matrice's osc address\nfalse\n: it will be prepended to the widget's preArgs\nstring\n: will be used to define the widgets' addresses, replacing dollar signs (\n$\n) with their respective index (to insert the actual dollar sign, it must be escaped with a backslash (\n\\$\n))\n\n\n\n\n\n\n\n\nPlots\n\n\nplot\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nplot\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nrangeX\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the x axis\n\n\n\n\n\n\nrangeY\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the y axis\n\n\n\n\n\n\nlogScaleX\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the x axis (log10)\n\n\n\n\n\n\nlogScaleY\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the y axis (log10)\n\n\n\n\n\n\norigin\n\u00b6\n\n\nnumber\n\n\n\"auto\"\n\n\nDefines the y axis origin. Set to \nfalse\n to disable it.\n\n\n\n\n\n\ndots\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\n\n\n\n\n\n\nbars\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use draw bars instead (disables \nlogScaleX\n and forces \nx axis\n even spacing)\n\n\n\n\n\n\nsmooth\n\u00b6\n\n\nboolean\n|\nnumber\n\n\nfalse\n\n\nSet to \ntrue\n to make the line smooth. Float values are also acceptable (works fine between \n0\n and \n0.5\n)\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the scale\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\narray\n|\nstring\n\n\n\"\"\n\n\n- \nArray\n of \ny\n values\n- \nArray\n of \n[x, y]\n \narray\n values\n- \nString\n \narray\n- \nString\n \nobject\n to update specific coordinates only: \n{0:1, 4:0}\n will change the 1\nst\n and 5\nth\n points' coordinates\n\n\n\n\n\n\n\n\neq\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\neq\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to false to hide the scale\n\n\n\n\n\n\nresolution\n\u00b6\n\n\nnumber\n\n\n128\n\n\nDefines the number of points used to compute the frequency response\n\n\n\n\n\n\nrangeY\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the y axis\n\n\n\n\n\n\norigin\n\u00b6\n\n\nnumber\n|\nboolean\n\n\n\"auto\"\n\n\nDefines the y axis origin. Set to \nfalse\n to disable it\n\n\n\n\n\n\nlogScaleX\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the x axis (log10)\n\n\n\n\n\n\nsmooth\n\u00b6\n\n\nboolean\n|\nnumber\n\n\nfalse\n\n\nSet to \ntrue\n to make the line smooth. Float values are also acceptable (works fine between \n0\n and \n0.5\n)\n\n\n\n\n\n\n\n\nvisualizer\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvisualizer\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nduration\n\u00b6\n\n\nnumber\n\n\n1\n\n\nDefines visualization duration in seconds\n\n\n\n\n\n\nrange\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nDefines the min and max values for the y axis\n\n\n\n\n\n\norigin\n\u00b6\n\n\nnumber\n\n\n\"auto\"\n\n\nDefines the y axis origin. Set to \nfalse\n to disable it\n\n\n\n\n\n\nlogScale\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use logarithmic scale for the y axis\n\n\n\n\n\n\nsmooth\n\u00b6\n\n\nboolean\n|\nnumber\n\n\nfalse\n\n\nSet to \ntrue\n to make the line smooth. Float values are also acceptable (works fine between \n0\n and \n0.5\n)\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to hide the scale\n\n\n\n\n\n\n\n\nled\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nled\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nValue to led intensity mapping range\n\n\n\n\n\n\nlogScale\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to use a logarithmic mapping scale)\n\n\n\n\n\n\n\n\nrgbled\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\narray\n|\nstring\n\n\n\"\"\n\n\n- \nArray\n: \n[r, g, b]\n (\nr\n, \ng\n and \nb\n between \n0\n and \n255\n)\n- \nArray\n: \n[r, g, b, alpha]\n (\nalpha\n between \n0\n and \n255\n)\n- \nString\n: CSS color\n\n\n\n\n\n\n\n\nmeter\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncss\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAvailable CSS variables:\n- \n--color-gauge: color;\n- \n--color-knob: color;\n- \n--color-pips: color;\n- \n--gauge-opacity: number;\n\n\n\n\n\n\nmeter\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nrange\n\u00b6\n\n\nobject\n\n\n{\n\"min\": 0,\n\"max\": 1\n}\n\n\nSee fader's \nrange\n\n\n\n\n\n\nlogScale\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nlogScale\n\n\n\n\n\n\norigin\n\u00b6\n\n\nnumber\n\n\n\"auto\"\n\n\nSee fader's \norigin\n\n\n\n\n\n\nunit\n\u00b6\n\n\nstring\n\n\n\"auto\"\n\n\nSee fader's \nunit\n\n\n\n\n\n\nalignRight\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nalignRight\n\n\n\n\n\n\nhorizontal\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \nhorizontal\n\n\n\n\n\n\npips\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \npips\n\n\n\n\n\n\ndashed\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSee fader's \ndashed\n\n\n\n\n\n\ngradient\n\u00b6\n\n\narray\n|\nobject\n\n\n[]\n\n\nWhen set, the meter's gauge will be filled with a linear color gradient\n- each item must be a CSS color string.\n- as an \nobject\n: each key must be a number between 0 and 1\n- each item must be a CSS color string.\nExamples: \n['blue', 'red']\n, {'0': 'blue', '0.9': 'blue', '1': 'red'}\n\n\n\n\n\n\n\n\ntext\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntext\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvertical\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display the text vertically\n\n\n\n\n\n\nwrap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to wrap long lines automatically.\nThis will not break overflowing words by default, word-breaking can be enabled by adding \nword-break: break-all;\n to the \ncss\n property\n\n\n\n\n\n\nalign\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nSet to \nleft\n or \nright\n to change text alignment (otherwise center)\n\n\n\n\n\n\n\n\nimage\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nimage\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nsize\n\u00b6\n\n\nstring\n\n\n\"cover\"\n\n\nCSS background-size\n\n\n\n\n\n\nposition\n\u00b6\n\n\nstring\n\n\n\"center\"\n\n\nCSS background-position\n\n\n\n\n\n\nrepeat\n\u00b6\n\n\nstring\n\n\n\"no-repear\"\n\n\nCSS background-repeat\n\n\n\n\n\n\nborder\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to disable the borders and background-color\n\n\n\n\n\n\ncache\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to false to disable image caching (forces file reload when updating or editing the widget).\nWhen true, sending \nreload\n to the widget reloads its image without changing its value\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\n- File \nurl\n or \nabsolute path\n- Base64 encoded image : \ndata:image/...\n\n\n\n\n\n\n\n\nsvg\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsvg\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nsvg\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nSvg xml definition:\n- will be wrapped in a \n svg /\n element\n- \npath\n commands support a special percent notation (\n%x\n and \n%y\n)\n\n\n\n\n\n\n\n\nframe\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nlabel\n\u00b6\n\n\nstring\n|\nboolean\n\n\n\"auto\"\n\n\nSet to \nfalse\n to hide completely\nInsert icons using the prefix ^ followed by the icon's name : ^play, ^pause, etc\nIf set to \nfalse\n, all pointer-events will be disabled on the frame as long as the editor is enabled to ensure it can be selected\n\n\n\n\n\n\nframe\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nborder\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to disable the borders and background-color\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nExternal web page URL. Only local URLs are allowed (starting with \nhttp://127.0.0.1/\n, \nhttp://10.x.x.x/\n, \nhttp://192.168.x.x/\n, etc)\n\n\n\n\n\n\n\n\nContainers\n\n\npanel\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\npanel\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nscroll\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to disable scrollbars\n\n\n\n\n\n\nborder\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nBy default, widgets in panels/strip have their border disabled, except for panels and strips. Set to \nfalse\n to apply this rule to the panel too\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\ninteger\n\n\n\"\"\n\n\nDefines currently opened tab in the widget\nA tab can be opened only by setting its parent's value\n\n\n\n\n\n\nchildren\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvariables\n\u00b6\n\n\n*\n\n\n\"@{parent.variables}\"\n\n\nDefines one or more arbitrary variables that can be inherited by children widgets\n\n\n\n\n\n\nwidgets\n\u00b6\n\n\narray\n\n\n[]\n\n\nEach element of the array must be a widget object. A panel cannot contain widgets and tabs simultaneously.\n\n\n\n\n\n\ntabs\n\u00b6\n\n\narray\n\n\n[]\n\n\nEach element of the array must be a tab object. A panel cannot contain widgets and tabs simultaneously\n\n\n\n\n\n\n\n\nstrip\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstrip\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nscroll\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to disable scrollbars\n\n\n\n\n\n\nhorizontal\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display widgets horizontally\n\n\n\n\n\n\nstretch\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to stretch widgets evenly\n\n\n\n\n\n\nborder\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nBy default, widgets in panels/strip have their border disabled, except for panels and strips. Set to \nfalse\n to apply this rule to the panel too\n\n\n\n\n\n\nspacing\n\u00b6\n\n\ninteger\n|\npercentage\n\n\n0\n\n\nAdds space between widgets. Percents are always relative to the strips width\n\n\n\n\n\n\nchildren\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvariables\n\u00b6\n\n\n*\n\n\n\"@{parent.variables}\"\n\n\nDefines one or more arbitrary variables that can be inherited by children widgets\n\n\n\n\n\n\nwidgets\n\u00b6\n\n\narray\n\n\n[]\n\n\nEach element of the array must be a widget object\n- By default, children widgets that don't have an explicit \nwidth\n/\nheight\n set will be shrinked to respect the sizes specified by others\n- Adding \nflex:1;\n to a children's \ncss\n will give it the ability the fill the remaining space\n- Multiple children can have a \nflex:x;\n css property (\nx\n will ponderate their expansion)\n\n\n\n\n\n\n\n\nmodal\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmodal\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ndoubleTap\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to make the modal require a double tap to open instead of a single tap\n\n\n\n\n\n\npopupLabel\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nAlternative label for the modal popup\n\n\n\n\n\n\npopupWidth\n\u00b6\n\n\nnumber\n|\npercentage\n\n\n\"80%\"\n\n\nModal popup's size\n\n\n\n\n\n\npopupHeight\n\u00b6\n\n\nnumber\n|\npercentage\n\n\n\"80%\"\n\n\nModal popup's size\n\n\n\n\n\n\npopupLeft\n\u00b6\n\n\nnumber\n|\npercentage\n\n\n\"auto\"\n\n\nModal popup's position\n\n\n\n\n\n\npopupTop\n\u00b6\n\n\nnumber\n|\npercentage\n\n\n\"auto\"\n\n\nModal popup's position\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\ninteger\n\n\n\"\"\n\n\nDefines the modal's state:\n0\n for closed, \n1\n for opened\n\n\n\n\n\n\nchildren\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvariables\n\u00b6\n\n\n*\n\n\n\"@{parent.variables}\"\n\n\nDefines one or more arbitrary variables that can be inherited by children widgets\n\n\n\n\n\n\nwidgets\n\u00b6\n\n\narray\n\n\n[]\n\n\nEach element of the array must be a widget object\n\n\n\n\n\n\n\n\nclone\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nclone\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nwidgetId\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nid\n of the widget to clone\n\n\n\n\n\n\noverrides\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nprops\n\u00b6\n\n\nobject\n\n\n{}\n\n\nCloned widget's properties to override\n\n\n\n\n\n\n\n\nSwitchers\n\n\nswitcher\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nswitcher\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nlinkedWidgets\n\u00b6\n\n\nstring\n|\narray\n\n\n\"\"\n\n\n- \nString\n: a widget's \nid\n whose state changes will be stored\n- \nArray\n: a list of widget \nid\n string\n\n\n\n\n\n\nhorizontal\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display values horizontally\n\n\n\n\n\n\nvalues\n\u00b6\n\n\narray\n|\nobject\n\n\n{\n\"Value 1\": 1,\n\"Value 2\": 2\n}\n\n\nEach item represents a bank that stores the values from the widgets listed in \nlinkedWidgets\n- \nArray\n of possible values to switch between : \n[1,2,3]\n- \nObject\n of \nlabel\n:value\n pairs. Numeric labels must be prepended or appended with a white space (or any other non-numeric character) otherwise the order of the values won't be kept\n\n\n\n\n\n\n\n\ncrossfader\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncrossfader\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nlinkedWidgets\n\u00b6\n\n\nstring\n|\narray\n\n\n\"\"\n\n\n- \nString\n: a widget's \nid\n whose state changes will be stored\n- \nArray\n: a list of widget \nid\n string\n\n\n\n\n\n\nhorizontal\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display values horizontally\n\n\n\n\n\n\n\n\nInputs\n\n\ninput\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ninput\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvertical\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to display the text vertically\n\n\n\n\n\n\nalign\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nSet to \nleft\n or \nright\n to change text alignment (otherwise center)\n\n\n\n\n\n\nunit\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nUnit will be appended to the displayed widget's value (it doesn't affect osc messages)\n\n\n\n\n\n\neditable\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to make the input non-editable\n\n\n\n\n\n\n\n\nkeys\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nkeys\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nbinding\n\u00b6\n\n\nstring\n|\narray\n\n\n\"\"\n\n\nKey combo \nstring\n or \narray\n of strings (see \nKeyboardJS\n documentation)\n\n\n\n\n\n\nkeydown\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nThis property is evaluated each time the key combo is pressed. Formulas are given extras variables in this context:\n- \nkey\n: pressed key name (usefull for handling multiple keys with a single keys widget)\n- \nctrl\n: control key state\n- \nalt\n: alt key state\n- \nshift\n: shift key state\n- \nsuper\n: command/windows key state\n\n\n\n\n\n\nkeyup\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nSame as \nkeydown\n, but evaluated when releasing the key combo\n\n\n\n\n\n\nrepeat\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nSet to \nfalse\n to prevent keydown repeats when holding the key combo pressed\n\n\n\n\n\n\n\n\nscript\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nscript\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\ncondition\n\u00b6\n\n\nstring\n\n\n1\n\n\nWhen the widget receives a value, if this property return a falsy value, the script property won't be evaluated. If it's non-falsy, it will be evaluated normally. Formulas are given one extra variable in this context:\n- \nvalue\n: the value received by the widget\n\n\n\n\n\n\nscript\n\u00b6\n\n\nstring\n\n\n\"\"\n\n\nThis property is evaluated each time the widget receives a value* if condition is non-falsy. Formulas are given extras variables in this context:\n- \nvalue\n: the value received by the widget\n- \nsend(target, address, arg1, arg2, ...)\n: function for sending osc messages (ignores the script's targets and the server's defaults unless \ntarget\n is \nfalse\n; ignores the script's \npreArgs\n)\n- \nset(id, value)\n: function for setting a widget's value\n* Note: \nvalue\n or \nlinkId\n properties can be used to receive other widgets' values\n\n\n\n\n\n\n\n\ngyroscope\n\n\n\n\n\n\n\n\nproperty\n\n\ntype\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ngyroscope\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nfrequency\n\u00b6\n\n\nnumber\n\n\n30\n\n\nValue update frequency (updates per seconds)\n\n\n\n\n\n\nnormalize\n\u00b6\n\n\nboolean\n\n\ntrue\n\n\nNormalize gravity related values\n\n\n\n\n\n\ncompass\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to return the orientation values with respect to the actual north direction of the world instead of the head direction of the device\n\n\n\n\n\n\nscreenAdjusted\n\u00b6\n\n\nboolean\n\n\nfalse\n\n\nSet to \ntrue\n to return screen adjusted values\n\n\n\n\n\n\nvalue\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\n\u00b6\n\n\nobject\n\n\n\"\"\n\n\nThe gyroscope's value is an object containing multiple values, which can be used by other widgets via the property maths syntax\n- \nvalue.do.alpha\n: deviceorientation event alpha\n- \nvalue.do.beta\n: deviceorientation event beta\n- \nvalue.do.gamma\n: deviceorientation event gamma\n- \nvalue.do.absolute\n: deviceorientation event absolute\n- \nvalue.dm.x\n: devicemotion event acceleration x\n- \nvalue.dm.y\n: devicemotion event acceleration y\n- \nvalue.dm.z\n: devicemotion event acceleration z\n- \nvalue.dm.gx\n: devicemotion event accelerationIncludingGravity x\n- \nvalue.dm.gy\n: devicemotion event accelerationIncludingGravity y\n- \nvalue.dm.gz\n: devicemotion event accelerationIncludingGravity z\n- \nvalue.dm.alpha\n: devicemotion event rotationRate alpha\n- \nvalue.dm.beta\n: devicemotion event rotationRate beta\n- \nvalue.dm.gamma\n: devicemotion event rotationRate gamma\n\n\n\n\n\n\n\n\n\ndocument.querySelectorAll('.thead2').forEach(function(item){\nitem.classList.remove('thead2')\nitem.closest('tr').classList.add('thead2')\n})", 
            "title": "Widgets reference"
        }, 
        {
            "location": "/widgets-reference/#generic-properties", 
            "text": "property  type  default  description", 
            "title": "Generic properties"
        }, 
        {
            "location": "/widgets-reference/#sliders", 
            "text": "", 
            "title": "Sliders"
        }, 
        {
            "location": "/widgets-reference/#fader", 
            "text": "property  type  default  description", 
            "title": "fader"
        }, 
        {
            "location": "/widgets-reference/#knob", 
            "text": "property  type  default  description", 
            "title": "knob"
        }, 
        {
            "location": "/widgets-reference/#encoder", 
            "text": "property  type  default  description", 
            "title": "encoder"
        }, 
        {
            "location": "/widgets-reference/#range", 
            "text": "property  type  default  description", 
            "title": "range"
        }, 
        {
            "location": "/widgets-reference/#buttons", 
            "text": "", 
            "title": "Buttons"
        }, 
        {
            "location": "/widgets-reference/#toggle", 
            "text": "property  type  default  description", 
            "title": "toggle"
        }, 
        {
            "location": "/widgets-reference/#push", 
            "text": "property  type  default  description", 
            "title": "push"
        }, 
        {
            "location": "/widgets-reference/#switch", 
            "text": "property  type  default  description", 
            "title": "switch"
        }, 
        {
            "location": "/widgets-reference/#dropdown", 
            "text": "property  type  default  description", 
            "title": "dropdown"
        }, 
        {
            "location": "/widgets-reference/#pads", 
            "text": "", 
            "title": "Pads"
        }, 
        {
            "location": "/widgets-reference/#xy", 
            "text": "property  type  default  description", 
            "title": "xy"
        }, 
        {
            "location": "/widgets-reference/#rgb", 
            "text": "property  type  default  description", 
            "title": "rgb"
        }, 
        {
            "location": "/widgets-reference/#multixy", 
            "text": "property  type  default  description", 
            "title": "multixy"
        }, 
        {
            "location": "/widgets-reference/#matrices", 
            "text": "", 
            "title": "Matrices"
        }, 
        {
            "location": "/widgets-reference/#matrix", 
            "text": "property  type  default  description", 
            "title": "matrix"
        }, 
        {
            "location": "/widgets-reference/#keyboard", 
            "text": "property  type  default  description", 
            "title": "keyboard"
        }, 
        {
            "location": "/widgets-reference/#plots", 
            "text": "", 
            "title": "Plots"
        }, 
        {
            "location": "/widgets-reference/#plot", 
            "text": "property  type  default  description", 
            "title": "plot"
        }, 
        {
            "location": "/widgets-reference/#eq", 
            "text": "property  type  default  description", 
            "title": "eq"
        }, 
        {
            "location": "/widgets-reference/#visualizer", 
            "text": "property  type  default  description", 
            "title": "visualizer"
        }, 
        {
            "location": "/widgets-reference/#led", 
            "text": "property  type  default  description", 
            "title": "led"
        }, 
        {
            "location": "/widgets-reference/#rgbled", 
            "text": "property  type  default  description", 
            "title": "rgbled"
        }, 
        {
            "location": "/widgets-reference/#meter", 
            "text": "property  type  default  description", 
            "title": "meter"
        }, 
        {
            "location": "/widgets-reference/#text", 
            "text": "property  type  default  description", 
            "title": "text"
        }, 
        {
            "location": "/widgets-reference/#image", 
            "text": "property  type  default  description", 
            "title": "image"
        }, 
        {
            "location": "/widgets-reference/#svg", 
            "text": "property  type  default  description", 
            "title": "svg"
        }, 
        {
            "location": "/widgets-reference/#frame", 
            "text": "property  type  default  description", 
            "title": "frame"
        }, 
        {
            "location": "/widgets-reference/#containers", 
            "text": "", 
            "title": "Containers"
        }, 
        {
            "location": "/widgets-reference/#panel", 
            "text": "property  type  default  description", 
            "title": "panel"
        }, 
        {
            "location": "/widgets-reference/#strip", 
            "text": "property  type  default  description", 
            "title": "strip"
        }, 
        {
            "location": "/widgets-reference/#modal", 
            "text": "property  type  default  description", 
            "title": "modal"
        }, 
        {
            "location": "/widgets-reference/#clone", 
            "text": "property  type  default  description", 
            "title": "clone"
        }, 
        {
            "location": "/widgets-reference/#switchers", 
            "text": "", 
            "title": "Switchers"
        }, 
        {
            "location": "/widgets-reference/#switcher", 
            "text": "property  type  default  description", 
            "title": "switcher"
        }, 
        {
            "location": "/widgets-reference/#crossfader", 
            "text": "property  type  default  description", 
            "title": "crossfader"
        }, 
        {
            "location": "/widgets-reference/#inputs", 
            "text": "", 
            "title": "Inputs"
        }, 
        {
            "location": "/widgets-reference/#input", 
            "text": "property  type  default  description", 
            "title": "input"
        }, 
        {
            "location": "/widgets-reference/#keys", 
            "text": "property  type  default  description", 
            "title": "keys"
        }, 
        {
            "location": "/widgets-reference/#script", 
            "text": "property  type  default  description", 
            "title": "script"
        }, 
        {
            "location": "/widgets-reference/#gyroscope", 
            "text": "property  type  default  description", 
            "title": "gyroscope"
        }, 
        {
            "location": "/extras/advanced-property-syntax/", 
            "text": "Advanced property syntax\n\n\nInheritance: \n@{}\n\n\nWidgets can use each other's property values by using the following syntaxes:\n\n\n\n\n@{this.propertyName}\n\n\n@{parent.propertyName}\n\n\n@{widgetId.propertyName}\n (where \nwidgetId\n is the target widget's \nid\n)\n\n\n\n\n\n\nNote\n\n\nDon't use \nwidgetId\n when targetting \nthis\n or \nparent\n, it won't work.   \n\n\n\n\npropertyName\n can be any of the target widget's properties.\n\n\nIt can be used to:\n\n\n\n\nconcatenate strings: \n/@{parent.id}/some_suffix\n\n\ndefine object value:   \n[\n@{parent.id}\n]\n\n\n\n\nIf the retreived property is an object (\n[] / {}\n), a subset can be defined by appending a dot and a key (array index or object key) : \n@{parent.variables.key}\n\n\n\n\nThe root panel's \nid\n is \nroot\n.\n\n\n\n\nUsing the value\n\n\nThe special property name \nvalue\n refers to a widget's current value (which can be affected by its \nvalue\n \nproperty\n).\n\n\nWhen omitted, the property name defaults to \nvalue\n : \n@{widgetId}\n =\n \n@{widgetId.value}\n\n\nDynamic properties\n\n\nSome properties, when changed, trigger a complete widget recreation that ends any ongoing user interaction. Also, updating these properties continuously (e.g. when linked to a slider's dynamic value) can be very cpu expensive.\n\n\nSome properties have much cheaper update routines and can be considered as \ndynamic\n, as in performance safe. These properties are marked in the documentation with a \n.\n\n\nCircular references cases\n\n\n\n\ncontainer widgets can inherit their children's properties only to define \ndynamic\n properties\n\n\nwidgets can inherit their own \nvalue\n property only to define \ndynamic\n properties\n\n\n\n\n\n\nNesting\n\n\nThe inheritance syntax supports 1-level nesting : \n@{fader_@{toggle_1}}\n\n\nOSC listeners: \nOSC{}\n\n\nThe following syntax allows listening on an osc address to define a property, with an optionnal default value :\n\n\nOSC{/address, 1}\n\n\nWill return \n1\n at first and listen for osc messages on address \n/address\n. Each time a value is received, the property will be updated.\n\n\nIf the leading slash (\n/\n) is omitted, the address will be prefixed with the widget's \naddress\n property:\n\n\nOSC{color, \nauto\n}\n\n\nWill listen for osc messages on address \n/widget_address/color\n.\n\n\n\n\nFormulas: \n#{}\n\n\nThe following syntax allow writing mathematical formulas in widgets' properties:\n\n\n#{FORMULA}\n\n\n\n\nWhere FORMULA is a valid \nMathJS\n expression:\n\n\n\n\nsyntax documentation\n\n\navailable functions\n\n\navailable constants\n\n\nformulas can be \nmultiline\n\n\nproperty inheritance calls (\n@{...}\n) are always resolved before formulas\n\n\narrays / matrices indexes are \nzero-based\n (ie \n[\na\n,\nb\n][0]\n returns \na\n)\n\n\nstrings can be multiline when enclosed in backticks instead of double quotes (\n` `\n)\n\n\n\n\nAdditionnal functions:\n\n\n\n\nindexOf(a, x)\n: returns index of item \nx\n in array \na\n\n\nunpack(x)\n: remove an array's brackets (\nunpack([1,2])\n returns \n1, 2\n)\n\n\npad(x, padding)\n: add leading zeros if the length the integer part of \nx\n is smaller than \npadding\n (\npad(1,2)\n returns \n01\n)\n\n\nlength(x)\n: returns the length of an array or string\n\n\nkeys(x)\n: returns an array of a given object's property names (from \nMDN\n)\n\n\nvalues(x)\n: returns an array of a given object's own enumerable property values (from \nMDN\n)\n\n\nextend(x, y)\n: merges two objects into one\n\n\n\n\n\n\nA single widget property can contain multiple formulas. Variables and functions declared in a formula are available to subsequent formulas in the same property definition.", 
            "title": "Advanced property syntax"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#advanced-property-syntax", 
            "text": "", 
            "title": "Advanced property syntax"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#inheritance", 
            "text": "Widgets can use each other's property values by using the following syntaxes:   @{this.propertyName}  @{parent.propertyName}  @{widgetId.propertyName}  (where  widgetId  is the target widget's  id )    Note  Don't use  widgetId  when targetting  this  or  parent , it won't work.      propertyName  can be any of the target widget's properties.  It can be used to:   concatenate strings:  /@{parent.id}/some_suffix  define object value:    [ @{parent.id} ]   If the retreived property is an object ( [] / {} ), a subset can be defined by appending a dot and a key (array index or object key) :  @{parent.variables.key}   The root panel's  id  is  root .", 
            "title": "Inheritance: @{}"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#using-the-value", 
            "text": "The special property name  value  refers to a widget's current value (which can be affected by its  value   property ).  When omitted, the property name defaults to  value  :  @{widgetId}  =   @{widgetId.value}", 
            "title": "Using the value"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#dynamic-properties", 
            "text": "Some properties, when changed, trigger a complete widget recreation that ends any ongoing user interaction. Also, updating these properties continuously (e.g. when linked to a slider's dynamic value) can be very cpu expensive.  Some properties have much cheaper update routines and can be considered as  dynamic , as in performance safe. These properties are marked in the documentation with a  .", 
            "title": "Dynamic properties"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#circular-references-cases", 
            "text": "container widgets can inherit their children's properties only to define  dynamic  properties  widgets can inherit their own  value  property only to define  dynamic  properties", 
            "title": "Circular references cases"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#nesting", 
            "text": "The inheritance syntax supports 1-level nesting :  @{fader_@{toggle_1}}", 
            "title": "Nesting"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#osc-listeners-osc", 
            "text": "The following syntax allows listening on an osc address to define a property, with an optionnal default value :  OSC{/address, 1} \nWill return  1  at first and listen for osc messages on address  /address . Each time a value is received, the property will be updated.  If the leading slash ( / ) is omitted, the address will be prefixed with the widget's  address  property:  OSC{color,  auto } \nWill listen for osc messages on address  /widget_address/color .", 
            "title": "OSC listeners: OSC{}"
        }, 
        {
            "location": "/extras/advanced-property-syntax/#formulas", 
            "text": "The following syntax allow writing mathematical formulas in widgets' properties:  #{FORMULA}  Where FORMULA is a valid  MathJS  expression:   syntax documentation  available functions  available constants  formulas can be  multiline  property inheritance calls ( @{...} ) are always resolved before formulas  arrays / matrices indexes are  zero-based  (ie  [ a , b ][0]  returns  a )  strings can be multiline when enclosed in backticks instead of double quotes ( ` ` )   Additionnal functions:   indexOf(a, x) : returns index of item  x  in array  a  unpack(x) : remove an array's brackets ( unpack([1,2])  returns  1, 2 )  pad(x, padding) : add leading zeros if the length the integer part of  x  is smaller than  padding  ( pad(1,2)  returns  01 )  length(x) : returns the length of an array or string  keys(x) : returns an array of a given object's property names (from  MDN )  values(x) : returns an array of a given object's own enumerable property values (from  MDN )  extend(x, y) : merges two objects into one    A single widget property can contain multiple formulas. Variables and functions declared in a formula are available to subsequent formulas in the same property definition.", 
            "title": "Formulas: #{}"
        }, 
        {
            "location": "/extras/css-tips/", 
            "text": "CSS Tips\n\n\nInline syntax\n\n\nFor simple use cases, the \ncss\n property can be written as a HTML inline styles (without any CSS selector). CSS rules will apply to the widget element.\n\n\nopacity\n:\n \n0\n.\n5\n;\n \n/* make the widget\ns transparent */\n\n\nfont-size\n:\n \n120\n%;\n \n/* increase font-size */\n\n\n\n\n\nSelector syntax\n\n\nCSS selectors can be used to apply styles to specific elements:\n\n\n:\nhost\n \n{\n\n    \n/* style for the widget element\n\n\n       \n { } also works (deprecated)\n\n\n    */\n\n\n}\n\n\n\n.\nlabel\n \n{\n\n    \n/* style for the .label elements */\n\n\n}\n\n\n\n \n.\nlabel\n \n{\n\n    \n/* style for the direct child .label element */\n\n\n}\n\n\n\n\n\n\n\nMixing Inline and Selector syntaxes doesn't work, once you use selectors, you have to use the \n:host\n selector to target the widget element.\n\n\n\n\nExtra css classes: \nclass\n\n\nThis non-standard css property can be used to add custom css classes to the widget element: \nclass: my-custom-class;\n\nMultiple classes can be added (one per \nclass\n statement).\n\n\n\n\nUsing class names that are already used in the app can be hazardous. In order to avoid that, custom class names should be prefixed with something uncommon and preferably cool, such as \nxxx-myclass\n or \ncrispy-seitan-myclass\n.\n\n\n\n\nLayering: \nz-index\n\n\nZ-Axis ordering can be set using the \nz-index\n rule. Absolutely positionned widgets (when \ntop\n or \nleft\n is different from \nauto\n) have \nz-index:10;\n by default.\n\n\nLayering: \npointer-events\n\n\nTo make a widget ignore interactions (ie to be able to click through it), add \npointer-events:none;\n.\n\n\n\n\nThis is always ignored when the editor is enabled.\n\n\n\n\nResponsive sizing\n\n\nIn most cases, using percentages in \nheight\n and \nwidth\n will do. CSS \ncalc()\n function can help in some cases:\n\n\n:\nhost\n \n{\n\n\n    \nwidth\n:\n \ncalc\n(\n100\n%\n \n-\n \n100\nrem\n);\n\n\n\n}\n\n\n\n\n\nMedia queries can also be used:\n\n\n@\nmedia\n \nscreen\n \nand\n \n(\nmin-width\n:\n \n768px\n)\n \n{\n\n\n    \n:\nhost\n \n{\n\n\n        \n/* style the widget if the screen is bigger than 768px */\n\n\n    \n}\n\n\n\n}\n\n\n\n\n\nSize units\n\n\n\n\nuse \nrem\n instead of \npx\n (\npx\n values will not scale when zooming)\n\n\nuse \n%\n for font-size\n\n\n\n\nCSS Variables\n\n\nCSS Variables declared in the  \ndefault theme\n can be overriden. Some widgets also use specific CSS variables (mostly to define colors) documented on their respective pages.\n\n\nOther tips\n\n\nUse the inspector\n\n\nHit \nF12\n to open the developers tools panel. The html/css inspector helps retreiving the class names needed to style specific parts of the widgets.\n\n\nPanel's background-color\n\n\nThis works for panel, strip and tabs:\n\n\n \n.\npanel\n \n{\n\n    \nbackground-color\n:\n \nred\n;\n\n\n}", 
            "title": "CSS Tips"
        }, 
        {
            "location": "/extras/css-tips/#css-tips", 
            "text": "", 
            "title": "CSS Tips"
        }, 
        {
            "location": "/extras/css-tips/#inline-syntax", 
            "text": "For simple use cases, the  css  property can be written as a HTML inline styles (without any CSS selector). CSS rules will apply to the widget element.  opacity :   0 . 5 ;   /* make the widget s transparent */  font-size :   120 %;   /* increase font-size */", 
            "title": "Inline syntax"
        }, 
        {
            "location": "/extras/css-tips/#selector-syntax", 
            "text": "CSS selectors can be used to apply styles to specific elements:  : host   { \n     /* style for the widget element           { } also works (deprecated)      */  }  . label   { \n     /* style for the .label elements */  }    . label   { \n     /* style for the direct child .label element */  }    Mixing Inline and Selector syntaxes doesn't work, once you use selectors, you have to use the  :host  selector to target the widget element.", 
            "title": "Selector syntax"
        }, 
        {
            "location": "/extras/css-tips/#extra-css-classes-class", 
            "text": "This non-standard css property can be used to add custom css classes to the widget element:  class: my-custom-class; \nMultiple classes can be added (one per  class  statement).   Using class names that are already used in the app can be hazardous. In order to avoid that, custom class names should be prefixed with something uncommon and preferably cool, such as  xxx-myclass  or  crispy-seitan-myclass .", 
            "title": "Extra css classes: class"
        }, 
        {
            "location": "/extras/css-tips/#layering-z-index", 
            "text": "Z-Axis ordering can be set using the  z-index  rule. Absolutely positionned widgets (when  top  or  left  is different from  auto ) have  z-index:10;  by default.", 
            "title": "Layering: z-index"
        }, 
        {
            "location": "/extras/css-tips/#layering-pointer-events", 
            "text": "To make a widget ignore interactions (ie to be able to click through it), add  pointer-events:none; .   This is always ignored when the editor is enabled.", 
            "title": "Layering: pointer-events"
        }, 
        {
            "location": "/extras/css-tips/#responsive-sizing", 
            "text": "In most cases, using percentages in  height  and  width  will do. CSS  calc()  function can help in some cases:  : host   { \n\n     width :   calc ( 100 %   -   100 rem );  }   Media queries can also be used:  @ media   screen   and   ( min-width :   768px )   { \n\n     : host   { \n\n         /* style the widget if the screen is bigger than 768px */ \n\n     }  }", 
            "title": "Responsive sizing"
        }, 
        {
            "location": "/extras/css-tips/#size-units", 
            "text": "use  rem  instead of  px  ( px  values will not scale when zooming)  use  %  for font-size", 
            "title": "Size units"
        }, 
        {
            "location": "/extras/css-tips/#css-variables", 
            "text": "CSS Variables declared in the   default theme  can be overriden. Some widgets also use specific CSS variables (mostly to define colors) documented on their respective pages.", 
            "title": "CSS Variables"
        }, 
        {
            "location": "/extras/css-tips/#other-tips", 
            "text": "", 
            "title": "Other tips"
        }, 
        {
            "location": "/extras/css-tips/#use-the-inspector", 
            "text": "Hit  F12  to open the developers tools panel. The html/css inspector helps retreiving the class names needed to style specific parts of the widgets.", 
            "title": "Use the inspector"
        }, 
        {
            "location": "/extras/css-tips/#panels-background-color", 
            "text": "This works for panel, strip and tabs:    . panel   { \n     background-color :   red ;  }", 
            "title": "Panel's background-color"
        }, 
        {
            "location": "/extras/theming/", 
            "text": "Theming\n\n\nBuilt-in themes\n\n\nThemes can be loaded with the \n--theme\n option. Multiple themes can be combined. Built-in themes can be loaded using their name, custom theme files can be loaded using their path.\n\n\nAvailable themes (full color scheme):\n\n\n\n\norange\n: grey and orange theme\n\n\nlight\n: light and blue\n\n\ndark\n: blue night theme\n\n\n\n\nAvailable extensions (alternative visual settings)\n\n\n\n\nflat\n: remove 3d effects\n\n\nalt-buttons\n: colorful active buttons\n\n\nresponsive-fonts\n: bigger texts for bigger screens\n\n\n\n\nCreating a custom theme\n\n\nCreating a custom theme is as simple as writing a tiny css file that will override the default css variables defined in \ndefault.scss\n :\n\n\n:\nroot\n \n{\n\n    \n--\ncolor-accent\n:\nred\n;\n\n\n}\n\n\n\n\n\nThis will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example :\n\n\n.\npanel-container\n \n{\n\n    \n--\ncolor-text\n:\nblue\n;\n\n\n}\n\n\n\n\n\nThis will change the default text color to blue for all elements in panel widgets.\n\n\nScss / autoreload\n\n\nWhen running the app \nfrom sources\n, custom themes can be written in scss:\n\n\n\n\nthe scss file must be located in \nsrc/browser/scss/themes/\n\n\nrun \nnpm run watch-css\n\n\n\n\nThe theme will be watched and compiled automatically to a css file located in app/browser/themes/ (css files in this directory can be selected from the theme option by their name, without .css suffix). If the app is running on default http port, clients will reload the theme automatically.", 
            "title": "Theming"
        }, 
        {
            "location": "/extras/theming/#theming", 
            "text": "", 
            "title": "Theming"
        }, 
        {
            "location": "/extras/theming/#built-in-themes", 
            "text": "Themes can be loaded with the  --theme  option. Multiple themes can be combined. Built-in themes can be loaded using their name, custom theme files can be loaded using their path.  Available themes (full color scheme):   orange : grey and orange theme  light : light and blue  dark : blue night theme   Available extensions (alternative visual settings)   flat : remove 3d effects  alt-buttons : colorful active buttons  responsive-fonts : bigger texts for bigger screens", 
            "title": "Built-in themes"
        }, 
        {
            "location": "/extras/theming/#creating-a-custom-theme", 
            "text": "Creating a custom theme is as simple as writing a tiny css file that will override the default css variables defined in  default.scss  :  : root   { \n     -- color-accent : red ;  }   This will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example :  . panel-container   { \n     -- color-text : blue ;  }   This will change the default text color to blue for all elements in panel widgets.", 
            "title": "Creating a custom theme"
        }, 
        {
            "location": "/extras/theming/#scss-autoreload", 
            "text": "When running the app  from sources , custom themes can be written in scss:   the scss file must be located in  src/browser/scss/themes/  run  npm run watch-css   The theme will be watched and compiled automatically to a css file located in app/browser/themes/ (css files in this directory can be selected from the theme option by their name, without .css suffix). If the app is running on default http port, clients will reload the theme automatically.", 
            "title": "Scss / autoreload"
        }, 
        {
            "location": "/extras/url-options/", 
            "text": "URL Options\n\n\nClient specific options can be set by adding query parameters to the server's url. One must prepend the url with a question mark (\n?\n) followed by \nparameter=value\n pairs separated with ampersands (\n).\n\n\n\n\n\n\n\n\nOption\n\n\nValue\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhdpi\n\n\n1 / 0\n\n\n0\n\n\nenable high resolution canvas\n\n\n\n\n\n\nforceHdpi\n\n\nnumber\n\n\n0\n\n\nforce canvas scaling (ignore \nhdpi\n)\n\n\n\n\n\n\ndoubletab\n\n\nnumber\n\n\n375\n\n\nsets the double tap/click time thershold in milliseconds\n\n\n\n\n\n\nzoom\n\n\nnumber\n\n\n1\n\n\nsets the initial zoom\n\n\n\n\n\n\nframerate\n\n\nnumber\n\n\n60\n\n\nlimit canvas drawing framerate\n\n\n\n\n\n\nlang\n\n\nstring\n\n\nsystem_default\n\n\nuse a different language than the default if available (available languages: en, fr, ru)\n\n\n\n\n\n\n\n\nExample:\n\n\nhttp://server-ip:port?hdpi=1\n\n\n\n\nWhen using the built-in client, url options can be set through the \n--url-options\n switch.\n\n\nExample: \nopen-stage-control --url-options zoom=2 doubletap=200", 
            "title": "URL options"
        }, 
        {
            "location": "/extras/url-options/#url-options", 
            "text": "Client specific options can be set by adding query parameters to the server's url. One must prepend the url with a question mark ( ? ) followed by  parameter=value  pairs separated with ampersands ( ).     Option  Value  Default  Description      hdpi  1 / 0  0  enable high resolution canvas    forceHdpi  number  0  force canvas scaling (ignore  hdpi )    doubletab  number  375  sets the double tap/click time thershold in milliseconds    zoom  number  1  sets the initial zoom    framerate  number  60  limit canvas drawing framerate    lang  string  system_default  use a different language than the default if available (available languages: en, fr, ru)     Example:  http://server-ip:port?hdpi=1   When using the built-in client, url options can be set through the  --url-options  switch.  Example:  open-stage-control --url-options zoom=2 doubletap=200", 
            "title": "URL Options"
        }, 
        {
            "location": "/extras/remote-control/", 
            "text": "Remote control\n\n\nAll widgets that send osc messages respond to the same messages. Additionnaly, Open Stage Control responds to some general osc commands.\n\n\n/EDIT id options\n\n\nApply a set of options to an existing widget by replacing the old ones with the new ones.\n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\noptions\n: \nstring\n, \nJSON5\n stringified object defining the new properties to merge\n\n\nexample: \n{\nlabel\n:\nNew Label\n, \ncolor\n:\nred\n}\n\n\n\n\n\n\nEditing a widget can be cpu expensive, hence updating the UI continuously is not a good idea\n\n\n\n\n/EDIT/MERGE id options\n\n\nApply a set of options to an existing widget by merging them to the widget's options.  \n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\noptions\n: \nstring\n, \nJSON5\n stringified object defining the new properties to merge\n\n\nexample: \n{\nlabel\n:\nNew Label\n, \ncolor\n:\nred\n}\n\n\n\n\n\n\nEditing a widget can be cpu expensive, hence updating the UI continuously is not a good idea\n\n\n\n\n/EDIT/UNDO\n\n\nUndo editing action\n\n\n/EDIT/REDO\n\n\nRedo editing action\n\n\n/EDIT/GET target id\n\n\nSends back a widget's data (JSON stringified object), including its children, to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\nid\n: \nstring\n, widget's \nid\n\n\n\n\nReturns \n/EDIT/GET id data\n\n\n\n\nid\n: \nstring\n\n\ndata\n: \nstring\n\n\n\n\n/EDIT/GET target address preArg1 preArg2 ...\n\n\nSends back a widget's data (JSON stringified object), including its children, to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\n\n\nReturns \n/EDIT/GET address preArg1 preArg2 ... data\n\n\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\ndata\n: \nstring\n\n\n\n\n/GET target id\n\n\nSends back a widget's value to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\nid\n: \nstring\n, widget's \nid\n\n\n\n\nReturns \n/GET id value\n\n\n\n\nid\n: \nstring\n\n\nvalue\n: \n*\n\n\n\n\n/GET target address preArg1 preArg2 ...\n\n\nSends back a widget's value to specified target.\n\n\n\n\ntarget\n: \nstring\n, \nip:port\n pair\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\n\n\nReturns \n/GET address preArg1 preArg2 ... value\n\n\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\nvalue\n: \n*\n\n\n\n\n/GET/#\n\n\nSame as \n/GET\n but uses the widget's address instead of \n/GET\n to reply.\n\n\n/SET target id value\n\n\nSet a widget's value as if it was interacted with from the interface. This is likely to make it send its value.\n\n\n\n\nid\n: \nstring\n, widget's \nid\n\n\nvalue\n: \n*\n, widget's new value\n\n\n\n\n/SET address preArg1 preArg2 ... value\n\n\nSet a widget's value as if it was interacted with from the interface. This is likely to make it send its value.\n\n\n\n\naddress\n: \nstring\n, widget's \naddress\n\n\npreArg[1...]\n: \n*\n, widget's \npreArgs\n\n\nvalue\n: \n*\n, widget's new value\n\n\n\n\n/TABS id id etc\n\n\nOpen the tabs designated by the \nid\n parameters. The target tab link must be accesible (opening a tab located in a disabled tab won't work unless you specify the parent tab's \nid\n before; the safest way to go is to pass the whole tab tree to enable).", 
            "title": "Remote control"
        }, 
        {
            "location": "/extras/remote-control/#remote-control", 
            "text": "All widgets that send osc messages respond to the same messages. Additionnaly, Open Stage Control responds to some general osc commands.", 
            "title": "Remote control"
        }, 
        {
            "location": "/extras/remote-control/#edit-id-options", 
            "text": "Apply a set of options to an existing widget by replacing the old ones with the new ones.   id :  string , widget's  id  options :  string ,  JSON5  stringified object defining the new properties to merge  example:  { label : New Label ,  color : red }    Editing a widget can be cpu expensive, hence updating the UI continuously is not a good idea", 
            "title": "/EDIT id options"
        }, 
        {
            "location": "/extras/remote-control/#editmerge-id-options", 
            "text": "Apply a set of options to an existing widget by merging them to the widget's options.     id :  string , widget's  id  options :  string ,  JSON5  stringified object defining the new properties to merge  example:  { label : New Label ,  color : red }    Editing a widget can be cpu expensive, hence updating the UI continuously is not a good idea", 
            "title": "/EDIT/MERGE id options"
        }, 
        {
            "location": "/extras/remote-control/#editundo", 
            "text": "Undo editing action", 
            "title": "/EDIT/UNDO"
        }, 
        {
            "location": "/extras/remote-control/#editredo", 
            "text": "Redo editing action", 
            "title": "/EDIT/REDO"
        }, 
        {
            "location": "/extras/remote-control/#editget-target-id", 
            "text": "Sends back a widget's data (JSON stringified object), including its children, to specified target.   target :  string ,  ip:port  pair  id :  string , widget's  id   Returns  /EDIT/GET id data   id :  string  data :  string", 
            "title": "/EDIT/GET target id"
        }, 
        {
            "location": "/extras/remote-control/#editget-target-address-prearg1-prearg2", 
            "text": "Sends back a widget's data (JSON stringified object), including its children, to specified target.   target :  string ,  ip:port  pair  address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs   Returns  /EDIT/GET address preArg1 preArg2 ... data   address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs  data :  string", 
            "title": "/EDIT/GET target address preArg1 preArg2 ..."
        }, 
        {
            "location": "/extras/remote-control/#get-target-id", 
            "text": "Sends back a widget's value to specified target.   target :  string ,  ip:port  pair  id :  string , widget's  id   Returns  /GET id value   id :  string  value :  *", 
            "title": "/GET target id"
        }, 
        {
            "location": "/extras/remote-control/#get-target-address-prearg1-prearg2", 
            "text": "Sends back a widget's value to specified target.   target :  string ,  ip:port  pair  address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs   Returns  /GET address preArg1 preArg2 ... value   address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs  value :  *", 
            "title": "/GET target address preArg1 preArg2 ..."
        }, 
        {
            "location": "/extras/remote-control/#get", 
            "text": "Same as  /GET  but uses the widget's address instead of  /GET  to reply.", 
            "title": "/GET/#"
        }, 
        {
            "location": "/extras/remote-control/#set-target-id-value", 
            "text": "Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value.   id :  string , widget's  id  value :  * , widget's new value", 
            "title": "/SET target id value"
        }, 
        {
            "location": "/extras/remote-control/#set-address-prearg1-prearg2-value", 
            "text": "Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value.   address :  string , widget's  address  preArg[1...] :  * , widget's  preArgs  value :  * , widget's new value", 
            "title": "/SET address preArg1 preArg2 ... value"
        }, 
        {
            "location": "/extras/remote-control/#tabs-id-id-etc", 
            "text": "Open the tabs designated by the  id  parameters. The target tab link must be accesible (opening a tab located in a disabled tab won't work unless you specify the parent tab's  id  before; the safest way to go is to pass the whole tab tree to enable).", 
            "title": "/TABS id id etc"
        }, 
        {
            "location": "/extras/custom-module/", 
            "text": "Custom module\n\n\nUsing the \n-c / --custom-module\n command-line switch, users can load a javascript file to tune the way Open Stage Control behaves regarding osc.\n\n\nIt must be of the following form:\n\n\n(\nfunction\n(){\n\n\n    \n// Do whatever you want, initialize some variables, declare some functions, ...\n\n\n    \nreturn\n \n{\n\n        \ninit\n:\n \nfunction\n(){\n\n            \n// this will be executed once when the osc server starts\n\n        \n},\n\n        \noscInFilter\n:\nfunction\n(\ndata\n){\n\n            \n// Filter incomming osc messages\n\n\n            \nvar\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n \n=\n \ndata\n\n\n            \n// do what you want\n\n\n            \n// address = string\n\n            \n// args = array of {value, type} objects\n\n            \n// host = string\n\n            \n// port = integer\n\n\n            \n// return data if you want the message to be processed\n\n            \nreturn\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n\n\n        \n},\n\n        \noscOutFilter\n:\nfunction\n(\ndata\n){\n\n            \n// Filter outgoing osc messages\n\n\n            \nvar\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n \n=\n \ndata\n\n\n            \n// same as oscInFilter\n\n\n            \n// return data if you want the message to be and sent\n\n            \nreturn\n \n{\naddress\n,\n \nargs\n,\n \nhost\n,\n \nport\n}\n\n        \n}\n\n    \n}\n\n\n\n})()\n\n\n\n\n\nThe module is executed in a restricted context, only a few globals are available :\n\n\n\n\nconsole\n: \nobject\n\n\nsendOsc\n: \nfunction({address, args, host, port})\n\n\nreceiveOsc\n: \nfunction({address, args, host, port})\n\n\nsetTimeout\n: \nfunction(function, delay)\n\n\nclearTimeout\n: \nfunction(timeout)\n\n\nsetInterval\n: \nfunction(function, delay)\n\n\nclearInterval\n: \nfunction(interval)\n\n\nsettings.read\n: \nfunction(name)\n, see \nsettings.js\n for available options\n\n\napp\n: an \nevent emitter\n for monitoring the events sent by the different clients. Event names can be found in \ncallbacks.js\n, callbacks are called with 2 arguments: \ndata\n (object) and \nclientId\n (string)\n\n\n\n\nsendOsc\n and \nreceiveOsc\n expect arguments formatted as follow:\n\n\n\n\naddress\n: \nstring\n\n\nargs\n: \narray\n of \n{type:\nOSC_TYPE_LETTER\n, value:VALUE}\n \nobjects\n\n\nhost\n: \nstring\n ip address, valid hostname or \nmidi\n\n\nport\n: \ninteger\n port number or \nstring\n midi device name", 
            "title": "Custom module"
        }, 
        {
            "location": "/extras/custom-module/#custom-module", 
            "text": "Using the  -c / --custom-module  command-line switch, users can load a javascript file to tune the way Open Stage Control behaves regarding osc.  It must be of the following form:  ( function (){ \n\n     // Do whatever you want, initialize some variables, declare some functions, ... \n\n     return   { \n         init :   function (){ \n             // this will be executed once when the osc server starts \n         }, \n         oscInFilter : function ( data ){ \n             // Filter incomming osc messages \n\n             var   { address ,   args ,   host ,   port }   =   data \n\n             // do what you want \n\n             // address = string \n             // args = array of {value, type} objects \n             // host = string \n             // port = integer \n\n             // return data if you want the message to be processed \n             return   { address ,   args ,   host ,   port } \n\n         }, \n         oscOutFilter : function ( data ){ \n             // Filter outgoing osc messages \n\n             var   { address ,   args ,   host ,   port }   =   data \n\n             // same as oscInFilter \n\n             // return data if you want the message to be and sent \n             return   { address ,   args ,   host ,   port } \n         } \n     }  })()   The module is executed in a restricted context, only a few globals are available :   console :  object  sendOsc :  function({address, args, host, port})  receiveOsc :  function({address, args, host, port})  setTimeout :  function(function, delay)  clearTimeout :  function(timeout)  setInterval :  function(function, delay)  clearInterval :  function(interval)  settings.read :  function(name) , see  settings.js  for available options  app : an  event emitter  for monitoring the events sent by the different clients. Event names can be found in  callbacks.js , callbacks are called with 2 arguments:  data  (object) and  clientId  (string)   sendOsc  and  receiveOsc  expect arguments formatted as follow:   address :  string  args :  array  of  {type: OSC_TYPE_LETTER , value:VALUE}   objects  host :  string  ip address, valid hostname or  midi  port :  integer  port number or  string  midi device name", 
            "title": "Custom module"
        }, 
        {
            "location": "/extras/midi/", 
            "text": "Sending / Receiving MIDI\n\n\nOpen Stage Control can send and receive MIDI messages.\n\n\nRequirements\n\n\nMIDI support requires additional software to be installed on the server's system:\n\n\n\n\npython (2 / 3)\n\n\npython package \nrtmidi\n (version 2.3.2)\n\n\n\n\n\n\nWhy an additionnal dependency ?\n\n\nProviding cross-platform MIDI support is not trivial, as it requires OS-specific compilation that cannot be automated within Open Stage Control's current packaging workflow. Using a python addon seems to be the best compromise so far : the core app remains easy to build, and the extra dependency is easy to install.\n\n\n\n\nSetup\n\n\nWhen running the app, the \n-m / --midi\n switch must be set; it accepts the following options (separated by spaces):\n\n\n\n\nlist\n: prints the available MIDI ports to the console; numbers in the first column may be used for \ninput\n/\noutput\n definition below\n\n\ndevice_name:input,output\n: connect to midi ports \ninput\n and \noutput\n; osc messages sent to target \nmidi:device_name\n will be processed as midi events; Multiple devices can be declared\n\n\n\n\nLinux only:\n\n\n\n\ndevice_name:virtual\n: creates a virtual midi device with one input port and one output port\n\n\njack\n: use JACK MIDI instead of ALSA (add as extra parameter). \nrtmidi\n must be compiled with \n--jack-midi\n flag for this to work.\n\n\n\n\nWidget settings\n\n\nIn order to send MIDI messages, a widget must have at least one \ntarget\n formatted as follows:\n\n\nmidi:device_name\n (where \ndevice_name\n is one of the declared midi devices)\n\n\nSupported MIDI messages\n\n\n\n\nDefine static argument values using the \npreArgs\n option in order to complete the respective MIDI message.\n\n\n\n\n/note channel note velocity\n\n\nNoteOn event or noteOff if velocity equals \n0\n.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\nnote\n: integer between 0 and 127\n\n\nvelocity\n: integer between 0 and 127\n\n\n\n\nExample:\n\n\nA push button might be configured as follows in order to send a MIDI note whose velocity is defined by the button's on/off value:\n\n\n\n\naddress\n: /note\n\n\npreArgs\n: [1, 60] (for MIDI channel 1, and note 60 / C3)\n\n\non\n: 100 (for noteOn velocity of 100 on button push)\n\n\noff\n: 0 (to send a noteOff on button release)\n\n\ntarget\n: [\"midi:device_name\"] (where device_name is one of the declared midi devices defined during \nsetup\n)\n\n\n\n\n/control channel cc value\n\n\nControl change event.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\ncc\n: integer between 0 and 127\n\n\nvalue\n: integer between 0 and 127\n\n\n\n\nExample:\n\n\nA fader might be configured as follows in order to send a MIDI control message (a volume control in this example):\n\n\n\n\naddress\n: /control\n\n\npre-args\n: [1, 7] (MIDI channel 1, control number 7 generally used as volume control)\n\n\nrange\n: {\"min\": 0, \"max\": 127} (MIDI values are encoded in this range)\n\n\ntarget\n: [\"midi:device_name\"]\n\n\n\n\n/program channel program\n\n\nProgram change event.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\nprogram\n: integer between 0 and 127\n\n\n\n\n/pitch channel pitch\n\n\nPitchWheel event.\n\n\n\n\nchannel\n: integer between 1 and 16\n\n\npitch\n: integer between 0 and 16383\n\n\n\n\n/sysex msg v1 .. vN\n\n\nSystem exclusive message.\n\n\n\n\nmsg\n: hexadecimal sysex data string of the form \nf0 ... f7\n. You may include placeholders of the form \nnn\n which will be replaced by \nv1, .., vN\n respectively.\n\n\nv1, .., vN\n: values encoded as hexadecimal data strings to include in \nmsg\n. Most probably, you will need to sepcify a \ncustom module\n in order to convert numeric widget values into the required hexadecimal format. In general, this conversion will be different for each manufacturer / device.\n\n\n\n\nFor a very simple example, refer to session 'sysex.json' found in the application's sub folder 'resources/app/examples/'. Please remember to adjust the button's \ntarget\n to the \ndevice_name\n used in your MIDI setup.", 
            "title": "Midi"
        }, 
        {
            "location": "/extras/midi/#sending-receiving-midi", 
            "text": "Open Stage Control can send and receive MIDI messages.", 
            "title": "Sending / Receiving MIDI"
        }, 
        {
            "location": "/extras/midi/#requirements", 
            "text": "MIDI support requires additional software to be installed on the server's system:   python (2 / 3)  python package  rtmidi  (version 2.3.2)    Why an additionnal dependency ?  Providing cross-platform MIDI support is not trivial, as it requires OS-specific compilation that cannot be automated within Open Stage Control's current packaging workflow. Using a python addon seems to be the best compromise so far : the core app remains easy to build, and the extra dependency is easy to install.", 
            "title": "Requirements"
        }, 
        {
            "location": "/extras/midi/#setup", 
            "text": "When running the app, the  -m / --midi  switch must be set; it accepts the following options (separated by spaces):   list : prints the available MIDI ports to the console; numbers in the first column may be used for  input / output  definition below  device_name:input,output : connect to midi ports  input  and  output ; osc messages sent to target  midi:device_name  will be processed as midi events; Multiple devices can be declared   Linux only:   device_name:virtual : creates a virtual midi device with one input port and one output port  jack : use JACK MIDI instead of ALSA (add as extra parameter).  rtmidi  must be compiled with  --jack-midi  flag for this to work.", 
            "title": "Setup"
        }, 
        {
            "location": "/extras/midi/#widget-settings", 
            "text": "In order to send MIDI messages, a widget must have at least one  target  formatted as follows:  midi:device_name  (where  device_name  is one of the declared midi devices)", 
            "title": "Widget settings"
        }, 
        {
            "location": "/extras/midi/#supported-midi-messages", 
            "text": "Define static argument values using the  preArgs  option in order to complete the respective MIDI message.", 
            "title": "Supported MIDI messages"
        }, 
        {
            "location": "/extras/midi/#note-channel-note-velocity", 
            "text": "NoteOn event or noteOff if velocity equals  0 .   channel : integer between 1 and 16  note : integer between 0 and 127  velocity : integer between 0 and 127   Example:  A push button might be configured as follows in order to send a MIDI note whose velocity is defined by the button's on/off value:   address : /note  preArgs : [1, 60] (for MIDI channel 1, and note 60 / C3)  on : 100 (for noteOn velocity of 100 on button push)  off : 0 (to send a noteOff on button release)  target : [\"midi:device_name\"] (where device_name is one of the declared midi devices defined during  setup )", 
            "title": "/note channel note velocity"
        }, 
        {
            "location": "/extras/midi/#control-channel-cc-value", 
            "text": "Control change event.   channel : integer between 1 and 16  cc : integer between 0 and 127  value : integer between 0 and 127   Example:  A fader might be configured as follows in order to send a MIDI control message (a volume control in this example):   address : /control  pre-args : [1, 7] (MIDI channel 1, control number 7 generally used as volume control)  range : {\"min\": 0, \"max\": 127} (MIDI values are encoded in this range)  target : [\"midi:device_name\"]", 
            "title": "/control channel cc value"
        }, 
        {
            "location": "/extras/midi/#program-channel-program", 
            "text": "Program change event.   channel : integer between 1 and 16  program : integer between 0 and 127", 
            "title": "/program channel program"
        }, 
        {
            "location": "/extras/midi/#pitch-channel-pitch", 
            "text": "PitchWheel event.   channel : integer between 1 and 16  pitch : integer between 0 and 16383", 
            "title": "/pitch channel pitch"
        }, 
        {
            "location": "/extras/midi/#sysex-msg-v1-vn", 
            "text": "System exclusive message.   msg : hexadecimal sysex data string of the form  f0 ... f7 . You may include placeholders of the form  nn  which will be replaced by  v1, .., vN  respectively.  v1, .., vN : values encoded as hexadecimal data strings to include in  msg . Most probably, you will need to sepcify a  custom module  in order to convert numeric widget values into the required hexadecimal format. In general, this conversion will be different for each manufacturer / device.   For a very simple example, refer to session 'sysex.json' found in the application's sub folder 'resources/app/examples/'. Please remember to adjust the button's  target  to the  device_name  used in your MIDI setup.", 
            "title": "/sysex msg v1 .. vN"
        }, 
        {
            "location": "/examples/", 
            "text": "Community examples\n\n\nFeel free to submitt you own by \nopening an issue\n on github.\n\n\nArdour\n\n\n\n\nArdour Control\n\n\n\n\n\n\nReaper\n\n\n\n\nReaper OSC Panels\n\n\n\n\n\n\nQLab\n\n\n\n\nQLab Cook Book / Open Stage Control\n\n\n\n\n\n\nBitwig\n\n\n\n\n\n\nOpen Stage Control Bitwig\n\n\n\n\n\n\n\n\nOpenStageControl4Bitwig\n\n\n\n\nhttps://www.youtube.com/watch?v=u-fgArpsHQQ\n\n\nhttps://www.youtube.com/watch?v=RvEMlo72ynQ\n\n\n\n\nOthers\n\n\n\n\nManaberry's UI", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#community-examples", 
            "text": "Feel free to submitt you own by  opening an issue  on github.", 
            "title": "Community examples"
        }, 
        {
            "location": "/examples/#ardour", 
            "text": "Ardour Control", 
            "title": "Ardour"
        }, 
        {
            "location": "/examples/#reaper", 
            "text": "Reaper OSC Panels", 
            "title": "Reaper"
        }, 
        {
            "location": "/examples/#qlab", 
            "text": "QLab Cook Book / Open Stage Control", 
            "title": "QLab"
        }, 
        {
            "location": "/examples/#bitwig", 
            "text": "Open Stage Control Bitwig     OpenStageControl4Bitwig   https://www.youtube.com/watch?v=u-fgArpsHQQ  https://www.youtube.com/watch?v=RvEMlo72ynQ", 
            "title": "Bitwig"
        }, 
        {
            "location": "/examples/#others", 
            "text": "Manaberry's UI", 
            "title": "Others"
        }, 
        {
            "location": "/credits/", 
            "text": "License\n\n\nCopyleft \u00a9 Jean-Emmanuel Doucet @ \nAMMD\n 2018.\nThis program is a free software released under the \nGNU/GPL3\n license.\n\n\nDependencies\n\n\nOpen Stage Control relies on several other free softwares, including \nNode.js\n, \nElectron\n, \nosc.js\n, \nbabel\n, \nbrowserify\n, \nexorcist\n, \nexpress\n, \nnode-sass\n, \njQuery\n, \njQuery-UI\n, \nFont Awesome\n, \nstacktracejs\n, \nmathjs\n. A comprehensive and up-to-date list can be found \nhere\n.\n\n\nContributors\n\n\nhttps://github.com/jean-emmanuel/open-stage-control/graphs/contributors\n\n\n\n\n\n\n\n\n\n\nBrowserStack supports Open Stage Control by providing a complete suite of browser emulators for Android, iOS and Windows.", 
            "title": "Credits"
        }, 
        {
            "location": "/credits/#license", 
            "text": "Copyleft \u00a9 Jean-Emmanuel Doucet @  AMMD  2018.\nThis program is a free software released under the  GNU/GPL3  license.", 
            "title": "License"
        }, 
        {
            "location": "/credits/#dependencies", 
            "text": "Open Stage Control relies on several other free softwares, including  Node.js ,  Electron ,  osc.js ,  babel ,  browserify ,  exorcist ,  express ,  node-sass ,  jQuery ,  jQuery-UI ,  Font Awesome ,  stacktracejs ,  mathjs . A comprehensive and up-to-date list can be found  here .", 
            "title": "Dependencies"
        }, 
        {
            "location": "/credits/#contributors", 
            "text": "https://github.com/jean-emmanuel/open-stage-control/graphs/contributors      BrowserStack supports Open Stage Control by providing a complete suite of browser emulators for Android, iOS and Windows.", 
            "title": "Contributors"
        }
    ]
}